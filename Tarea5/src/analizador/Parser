package analizador;

import java_cup.runtime.*;
import java.util.Iterator;
import tarea5.*;


parser code
{:
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/
    public void syntax_error(Symbol s){
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
    }
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
    }


:}

terminal String abre,cierra,coma,num;

non terminal Nodo S,LISTAPUNTOS;

start with S;

S::= LISTAPUNTOS:A{:
      if(!A.error){
        System.out.println("Punto mas cercano: (" + A.xAux + "," + A.yAux + ")");
        System.out.prinln("Distancia: " + A.distancia);
      }
    :}
;

LISTAPUNTOS::=LISTAPUNTOS:A abre num:B coma num:C cierra{:
    int x1 = Integer.parseInt(B);
    int y1 = Integer.parseInt(C);

    if(x1 == A.x && y1 == A.y){
      A.error = true;
      System.out.println("La condicion inicial (" + x1 + "," + y1 + ") se repite");
    }

    else{
      double a = x1 - A.x;
      double b = y1 - A.y;
      double distancia = Math.sqrt(a*a + b*b);

      if(A.distancia == 0 || distancia < A.distancia){
        A.distancia = distancia;
        A.xAux = x1;
        A.yAux = y1;
      }

    }
    RESULT = A;
  :}
  | abre num:A coma num:B cierra{:
    Nodo nuevo = new Nodo();
    nuevo.x = Integer.parseInt(A);
    nuevo.y = Integer.parseInt(B);
    RESULT = nuevo;
  :}
;
