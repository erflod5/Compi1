
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;
import java.util.Iterator;
import final_compi1.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser1 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser1() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser1(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser1(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\004\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\020\005\011\012\013\013\010\014\014\015" +
    "\005\016\012\017\015\001\002\000\010\002\ufffe\010\034" +
    "\011\ufffe\001\002\000\022\002\ufff4\004\ufff4\005\ufff4\006" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\020\ufff4\001\002\000\004" +
    "\002\036\001\002\000\006\002\000\011\032\001\002\000" +
    "\022\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\011\ufff5\020\ufff5\001\002\000\020\005\011\012\013\013" +
    "\010\014\014\015\005\016\012\017\015\001\002\000\022" +
    "\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\020\ufff3\001\002\000\022\002\ufff6\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\020\ufff6\001\002\000" +
    "\022\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2" +
    "\011\ufff2\020\ufff2\001\002\000\020\005\011\012\013\013" +
    "\010\014\014\015\005\016\012\017\015\001\002\000\020" +
    "\002\ufffc\004\020\005\021\006\017\007\022\010\ufffc\011" +
    "\ufffc\001\002\000\020\005\011\012\013\013\010\014\014" +
    "\015\005\016\012\017\015\001\002\000\020\005\011\012" +
    "\013\013\010\014\014\015\005\016\012\017\015\001\002" +
    "\000\020\005\011\012\013\013\010\014\014\015\005\016" +
    "\012\017\015\001\002\000\020\005\011\012\013\013\010" +
    "\014\014\015\005\016\012\017\015\001\002\000\022\002" +
    "\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\020\ufff8\001\002\000\022\002\ufffa\004\ufffa\005\ufffa\006" +
    "\017\007\022\010\ufffa\011\ufffa\020\ufffa\001\002\000\022" +
    "\002\ufffb\004\ufffb\005\ufffb\006\017\007\022\010\ufffb\011" +
    "\ufffb\020\ufffb\001\002\000\022\002\ufff9\004\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\020\ufff9\001\002\000" +
    "\014\004\020\005\021\006\017\007\022\020\030\001\002" +
    "\000\022\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\020\ufff1\001\002\000\022\002\ufff7\004\ufff7" +
    "\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\020\ufff7\001" +
    "\002\000\020\005\011\012\013\013\010\014\014\015\005" +
    "\016\012\017\015\001\002\000\010\002\uffff\010\034\011" +
    "\uffff\001\002\000\020\005\011\012\013\013\010\014\014" +
    "\015\005\016\012\017\015\001\002\000\020\002\ufffd\004" +
    "\020\005\021\006\017\007\022\010\ufffd\011\ufffd\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\012\002\005\003\006\004\003\005\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\026\001\001\000\002\001\001\000\004\005" +
    "\025\001\001\000\004\005\024\001\001\000\004\005\023" +
    "\001\001\000\004\005\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\032\005\015\001\001\000\002\001\001\000\004\005\034" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser1$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser1$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser1$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/
    public void syntax_error(Symbol s){
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
    }
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser1$actions {
  private final parser1 parser;

  /** Constructor */
  CUP$parser1$actions(parser1 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser1$do_action_part00000000(
    int                        CUP$parser1$act_num,
    java_cup.runtime.lr_parser CUP$parser1$parser,
    java.util.Stack            CUP$parser1$stack,
    int                        CUP$parser1$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser1$result;

      /* select the action based on the action number */
      switch (CUP$parser1$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Nodo2 start_val = (Nodo2)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		RESULT = start_val;
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser1$parser.done_parsing();
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= LENT 
            {
              Nodo2 RESULT =null;
		

  
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LENT ::= LENT puntocoma LEXPR 
            {
              Nodo2 RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Nodo2 A = (Nodo2)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Nodo2 B = (Nodo2)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		
    Principal.salida1.append(B.cadena1);
    Principal.salida1.append("\n");
    Principal.salida1.append(B.cadena2);
    Principal.salida1.append("\n");
  
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("LENT",1, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LENT ::= LEXPR 
            {
              Nodo2 RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Nodo2 A = (Nodo2)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		
    Principal.salida1.append(A.cadena1);
    Principal.salida1.append("\n");
    Principal.salida1.append(A.cadena2 );
    Principal.salida1.append("\n");
  
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("LENT",1, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LEXPR ::= LEXPR coma E 
            {
              Nodo2 RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Nodo2 A = (Nodo2)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Nodo2 B = (Nodo2)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		
    Nodo2 nuevo = new Nodo2();
    nuevo.cadena1 = A.cadena1 + "," + B.cadena1;
    nuevo.evaluado = true;
    if(!A.evaluado){
      if(A.tipo == 1){
        if(B.tipo == 1){
          nuevo.dato = (int)A.dato + (int)B.dato;
          nuevo.tipo = 1;
        }
        else if(B.tipo == 2){
          nuevo.dato = (int)A.dato + (double)B.dato;
          nuevo.tipo = 2;
        }
        else{
          nuevo.cadena2 = A.dato + "," + B.cadena1;
          nuevo.dato = "";
          nuevo.tipo = 5;
        }
      }
      else if(A.tipo == 2){
        if(B.tipo == 1 || B.tipo == 2){
          nuevo.dato = (double)A.dato + Double.parseDouble(B.dato.toString());
          nuevo.tipo = 2;
        }
        else{
          nuevo.cadena2 = A.dato + "," + B.cadena1;
          nuevo.tipo = 5;
          nuevo.dato = "";
        }
      }
      else if(B.tipo ==1 || B.tipo ==2){
        nuevo.cadena2 = A.cadena1;
        nuevo.tipo = B.tipo;
        nuevo.dato = B.dato;
      }
      else{
        nuevo.cadena2 = A.cadena1 + B.cadena1;
        nuevo.tipo = B.tipo;
        nuevo.dato = B.dato;
      }
    }
    else{
      if(A.tipo == 1){
        if(B.tipo == 1){
          nuevo.dato = (int)A.dato + (int)B.dato;
          nuevo.tipo = 1;
        }
        else if(B.tipo == 2){
          nuevo.dato = (int)A.dato + (double)B.dato;
          nuevo.tipo = 2;
        }
        else{
          nuevo.cadena2 = A.cadena2 + "," + A.dato + "," + B.cadena1;
          nuevo.dato = "";
          nuevo.tipo = 5;
        }
      }
      else if(A.tipo == 2){
        if(B.tipo == 1 || B.tipo == 2){
          nuevo.dato = (double)A.dato + Double.parseDouble(B.dato.toString());
          nuevo.tipo = 2;
        }
        else{
          nuevo.cadena2 = A.cadena2 + "," + A.dato + "," + B.cadena1;
          nuevo.tipo = 5;
          nuevo.dato = "";
        }
      }
      else if(B.tipo == 1 || B.tipo == 2){
        if(A.cadena2 == null)
          nuevo.cadena2 = A.cadena1;
        else
          nuevo.cadena2 = A.cadena2;
        nuevo.tipo = B.tipo;
        nuevo.dato = B.dato;
      }
      else{
        if(A.cadena2 == null)
          nuevo.cadena2 = A.cadena1 + B.cadena1;
        else
          nuevo.cadena2 = A.cadena2 + B.cadena1;

        nuevo.tipo = B.tipo;
        nuevo.dato = B.dato;
      }
    }
    RESULT = nuevo;
  
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("LEXPR",2, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LEXPR ::= E 
            {
              Nodo2 RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Nodo2 A = (Nodo2)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		
    RESULT = A;
  
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("LEXPR",2, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E ::= E mas E 
            {
              Nodo2 RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Nodo2 A = (Nodo2)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Nodo2 B = (Nodo2)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		
    Nodo2 nuevo = new Nodo2();
    nuevo.tipo = 4;
    if(A.tipo == 1){
      if(B.tipo == 1){
        nuevo.dato = (int)A.dato + (int)B.dato;
        nuevo.tipo = 1;
      }
      else if(B.tipo == 2){
        nuevo.dato = (int)A.dato + (double)B.dato;
        nuevo.tipo = 2;
      }
    }
    else if(A.tipo == 2){
      if(B.tipo == 1 || B.tipo == 2){
        nuevo.dato = (double)A.dato + Double.parseDouble(B.dato.toString());
        nuevo.tipo = 2;
      }
    }
    nuevo.cadena1 = A.cadena1 + " " + B.cadena1 + "+";
    RESULT = nuevo;
  
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E ::= E menos E 
            {
              Nodo2 RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Nodo2 A = (Nodo2)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Nodo2 B = (Nodo2)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		
    Nodo2 nuevo = new Nodo2();
    nuevo.tipo = 4;
    if(A.tipo == 1){
      if(B.tipo == 1){
        nuevo.dato = (int)A.dato - (int)B.dato;
        nuevo.tipo = 1;
      }
      else if(B.tipo == 2){
        nuevo.dato = (int)A.dato - (double)B.dato;
        nuevo.tipo = 2;
      }
    }
    else if(A.tipo == 2){
      if(B.tipo == 1 || B.tipo == 2){
        nuevo.dato = (double)A.dato - Double.parseDouble(B.dato.toString());
        nuevo.tipo = 2;
      }
    }
    nuevo.cadena1 = A.cadena1 + " " + B.cadena1 + "-";
    RESULT = nuevo;
    
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E ::= E por E 
            {
              Nodo2 RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Nodo2 A = (Nodo2)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Nodo2 B = (Nodo2)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		
    Nodo2 nuevo = new Nodo2();
    nuevo.tipo = 4;
    if(A.tipo == 1){
      if(B.tipo == 1){
        nuevo.dato = (int)A.dato * (int)B.dato;
        nuevo.tipo = 1;
      }
      else if(B.tipo == 2){
        nuevo.dato = (int)A.dato * (double)B.dato;
        nuevo.tipo = 2;
      }
    }
    else if(A.tipo == 2){
      if(B.tipo == 1 || B.tipo == 2){
        nuevo.dato = (double)A.dato * Double.parseDouble(B.dato.toString());
        nuevo.tipo = 2;
      }
    }
    nuevo.cadena1 = A.cadena1 + " " + B.cadena1 + "*";
    RESULT = nuevo;
    
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E ::= E div E 
            {
              Nodo2 RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)).right;
		Nodo2 A = (Nodo2)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Nodo2 B = (Nodo2)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		
    Nodo2 nuevo = new Nodo2();
    nuevo.tipo = 4;
    if(A.tipo == 1){
      if(B.tipo == 1){
        nuevo.dato = (int)A.dato / (int)B.dato;
        nuevo.tipo = 1;
      }
      else if(B.tipo == 2){
        nuevo.dato = (int)A.dato / (double)B.dato;
        nuevo.tipo = 2;
      }
    }
    else if(A.tipo == 2){
      if(B.tipo == 1 || B.tipo == 2){
        nuevo.dato = (double)A.dato / Double.parseDouble(B.dato.toString());
        nuevo.tipo = 2;
      }
    }
    nuevo.cadena1 = A.cadena1 + " " + B.cadena1 + "/";

    RESULT = nuevo;
    
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E ::= menos E 
            {
              Nodo2 RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		Nodo2 A = (Nodo2)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		
    Nodo2 nuevo = new Nodo2();
    nuevo.cadena1 = A.cadena1 + "-";
    if(nuevo.tipo == 1){
      nuevo.dato = -(int)nuevo.dato;
    }
    else if(nuevo.tipo == 2){
      nuevo.dato = -(double)nuevo.dato;
    }
    RESULT = nuevo;
    
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= entero 
            {
              Nodo2 RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		
    Nodo2 nuevo = new Nodo2();
    nuevo.tipo = 1;
    nuevo.dato = Integer.parseInt(A);
        nuevo.cadena1 = A;
    RESULT = nuevo;
    
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E ::= decimal 
            {
              Nodo2 RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		
    Nodo2 nuevo = new Nodo2();
    nuevo.tipo = 2;
    nuevo.dato = Double.parseDouble(A);
        nuevo.cadena1 = A;
    RESULT = nuevo;
    
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // E ::= cadena 
            {
              Nodo2 RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		
    Nodo2 nuevo = new Nodo2();
    nuevo.tipo = 3;
    nuevo.dato = A;
        nuevo.cadena1 = A;
    RESULT = nuevo;
    
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // E ::= caracter 
            {
              Nodo2 RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		
    Nodo2 nuevo = new Nodo2();
    nuevo.tipo = 4;
    nuevo.dato = A;
        nuevo.cadena1 = A;
    RESULT = nuevo;
    
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // E ::= booleano 
            {
              Nodo2 RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$parser1$stack.peek()).value;
		
    Nodo2 nuevo = new Nodo2();
    nuevo.tipo = 5;
    nuevo.dato = A;
    nuevo.cadena1 = A;
    RESULT = nuevo;
    
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // E ::= abre E cierra 
            {
              Nodo2 RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-1)).right;
		Nodo2 A = (Nodo2)((java_cup.runtime.Symbol) CUP$parser1$stack.elementAt(CUP$parser1$top-1)).value;
		
    Nodo2 nuevo = new Nodo2();
    nuevo.tipo = A.tipo;
    nuevo.dato = A.dato;
    nuevo.cadena2 = A.cadena2;
    nuevo.cadena1 = "(" + A.cadena1 + ")";
    RESULT = nuevo;
    
              CUP$parser1$result = parser.getSymbolFactory().newSymbol("E",3, ((java_cup.runtime.Symbol)CUP$parser1$stack.elementAt(CUP$parser1$top-2)), ((java_cup.runtime.Symbol)CUP$parser1$stack.peek()), RESULT);
            }
          return CUP$parser1$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser1$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser1$do_action(
    int                        CUP$parser1$act_num,
    java_cup.runtime.lr_parser CUP$parser1$parser,
    java.util.Stack            CUP$parser1$stack,
    int                        CUP$parser1$top)
    throws java.lang.Exception
    {
              return CUP$parser1$do_action_part00000000(
                               CUP$parser1$act_num,
                               CUP$parser1$parser,
                               CUP$parser1$stack,
                               CUP$parser1$top);
    }
}

}
