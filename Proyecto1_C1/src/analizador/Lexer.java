/* The following code was generated by JFlex 1.7.0 */

package analizador;
import java_cup.runtime.Symbol;


import static proyecto1_c1.Principal.token;
import static proyecto1_c1.Principal.errorLexer;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexer</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TEXTO = 2;
  public static final int HS_STATE = 4;
  public static final int COM_HTML = 6;
  public static final int COM_LIN = 8;
  public static final int COM_MLIN = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  7, 37, 37, 36,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1, 14,  6, 46, 45,  0, 51,  0, 43, 44, 38, 41, 40, 42,  5, 15, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  0, 39,  9, 17, 16, 10, 
     0, 24, 25, 18, 33, 26, 31, 34, 11, 23,  2, 54, 30, 20, 32, 19, 
    21,  2, 27, 13, 28, 29,  2,  2, 35,  2,  2, 49,  8, 50,  0,  3, 
     0, 24, 25, 18, 33, 26, 31, 34, 11, 23,  2, 54, 30, 20, 32, 19, 
    21,  2, 27, 13, 28, 29,  2,  2, 35,  2,  2, 47, 52, 48,  0,  0, 
     0,  0,  0,  0,  0, 37,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\1\1\3\1\7\1\10\1\11\2\3\1\1\5\3"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\16\1\22\2\16\1\17\1\23\1\24\1\25\1\26"+
    "\1\17\1\16\6\17\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\2\16\2\2\1\44\1\2\1\0\1\45\2\0\1\46"+
    "\1\0\5\3\1\0\2\3\1\0\1\3\1\0\4\3"+
    "\1\0\1\3\3\0\1\47\1\0\1\50\1\51\1\0"+
    "\1\17\1\52\1\53\1\54\1\55\1\56\2\17\1\57"+
    "\1\0\1\57\7\17\1\60\1\61\1\62\1\63\1\45"+
    "\2\0\6\3\1\0\2\3\1\0\1\3\1\0\4\3"+
    "\1\0\1\3\1\0\1\64\1\47\1\0\2\17\1\0"+
    "\1\17\1\0\2\17\1\0\5\17\1\65\1\0\6\3"+
    "\1\0\2\3\1\0\1\3\1\0\4\3\2\66\1\67"+
    "\5\0\6\17\1\0\1\17\1\0\1\17\1\70\2\71"+
    "\1\17\1\72\1\0\5\17\2\73\2\74\4\3\1\0"+
    "\1\3\1\75\1\0\1\3\1\0\1\3\1\76\1\3"+
    "\1\77\6\0\7\17\1\0\1\17\1\0\2\17\2\100"+
    "\5\17\2\3\1\101\1\3\2\102\1\0\1\3\2\103"+
    "\1\104\1\105\7\0\10\17\1\0\3\17\1\0\1\17"+
    "\1\0\1\17\1\0\3\17\1\0\4\17\1\106\1\3"+
    "\1\107\2\110\1\0\1\111\1\0\1\112\3\0\1\17"+
    "\1\111\1\17\1\112\4\17\1\0\4\17\1\0\1\17"+
    "\1\0\1\17\2\113\1\17\1\114\1\0\1\17\1\115"+
    "\2\17\1\116\1\117\2\0\1\120\1\121\1\122\2\17"+
    "\1\120\1\121\1\122\1\17\1\0\4\17\1\0\1\17"+
    "\2\123\1\17\1\0\1\17\1\124\1\125\2\0\3\17"+
    "\1\0\4\17\1\0\2\17\1\0\1\17\2\0\3\17"+
    "\1\0\1\17\1\126\1\127\1\17\2\130\1\0\1\17"+
    "\1\0\1\17\2\0\3\17\2\131\1\132\1\133\1\0"+
    "\1\17\1\0\1\17\1\134\1\0\1\134\1\17\1\135"+
    "\2\136\1\0\1\17\2\137\2\140";

  private static int [] zzUnpackAction() {
    int [] result = new int[417];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u014a\0\u025d\0\u0294\0\u02cb\0\u014a"+
    "\0\u014a\0\u014a\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415"+
    "\0\u044c\0\u0483\0\u014a\0\u04ba\0\u014a\0\u04f1\0\u014a\0\u0528"+
    "\0\u055f\0\u014a\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9"+
    "\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861"+
    "\0\u0898\0\u08cf\0\u0906\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a"+
    "\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a"+
    "\0\u093d\0\u0974\0\u014a\0\u09ab\0\u014a\0\u09e2\0\u0226\0\u014a"+
    "\0\u0a19\0\u0a50\0\u014a\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63"+
    "\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b"+
    "\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0596"+
    "\0\u014a\0\u0ed3\0\u014a\0\u014a\0\u0f0a\0\u0f41\0\u014a\0\u014a"+
    "\0\u014a\0\u014a\0\u014a\0\u0f78\0\u0faf\0\u014a\0\u0fe6\0\u0528"+
    "\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u014a"+
    "\0\u014a\0\u014a\0\u014a\0\u0226\0\u119e\0\u11d5\0\u120c\0\u1243"+
    "\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb"+
    "\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3"+
    "\0\u15ea\0\u0e9c\0\u0596\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd"+
    "\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u187e\0\u18b5"+
    "\0\u18ec\0\u014a\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36"+
    "\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u1bee"+
    "\0\u1c25\0\u1c5c\0\u1c93\0\u014a\0\u01b8\0\u014a\0\u1cca\0\u1d01"+
    "\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9"+
    "\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u0528\0\u014a\0\u0528"+
    "\0\u2003\0\u0528\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d"+
    "\0\u014a\0\u01b8\0\u014a\0\u01b8\0\u2184\0\u21bb\0\u21f2\0\u2229"+
    "\0\u2260\0\u2297\0\u01b8\0\u22ce\0\u2305\0\u233c\0\u2373\0\u01b8"+
    "\0\u23aa\0\u01b8\0\u23e1\0\u2418\0\u244f\0\u2486\0\u24bd\0\u24f4"+
    "\0\u252b\0\u2562\0\u2599\0\u25d0\0\u2607\0\u263e\0\u2675\0\u26ac"+
    "\0\u26e3\0\u271a\0\u2751\0\u2788\0\u014a\0\u0528\0\u27bf\0\u27f6"+
    "\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909\0\u01b8\0\u2940\0\u014a"+
    "\0\u01b8\0\u2977\0\u29ae\0\u014a\0\u01b8\0\u01b8\0\u01b8\0\u29e5"+
    "\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d"+
    "\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55"+
    "\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d"+
    "\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9\0\u3020\0\u3057\0\u308e\0\u30c5"+
    "\0\u30fc\0\u01b8\0\u014a\0\u01b8\0\u3133\0\u014a\0\u316a\0\u014a"+
    "\0\u31a1\0\u31d8\0\u320f\0\u3246\0\u0528\0\u327d\0\u0528\0\u32b4"+
    "\0\u32eb\0\u3322\0\u3359\0\u3390\0\u33c7\0\u33fe\0\u3435\0\u346c"+
    "\0\u34a3\0\u34da\0\u3511\0\u3548\0\u014a\0\u0528\0\u357f\0\u0528"+
    "\0\u35b6\0\u35ed\0\u0528\0\u3624\0\u365b\0\u01b8\0\u01b8\0\u3692"+
    "\0\u36c9\0\u014a\0\u014a\0\u014a\0\u3700\0\u3737\0\u0528\0\u0528"+
    "\0\u0528\0\u376e\0\u37a5\0\u37dc\0\u3813\0\u384a\0\u3881\0\u38b8"+
    "\0\u38ef\0\u014a\0\u0528\0\u3926\0\u395d\0\u3994\0\u0528\0\u0528"+
    "\0\u39cb\0\u3a02\0\u3a39\0\u3a70\0\u3aa7\0\u3ade\0\u3b15\0\u3b4c"+
    "\0\u3b83\0\u3bba\0\u3bf1\0\u3c28\0\u3c5f\0\u3c96\0\u3ccd\0\u3d04"+
    "\0\u3d3b\0\u3d72\0\u3da9\0\u3de0\0\u3e17\0\u3e4e\0\u0528\0\u0528"+
    "\0\u3e85\0\u014a\0\u0528\0\u3ebc\0\u3ef3\0\u3f2a\0\u3f61\0\u3f98"+
    "\0\u3fcf\0\u4006\0\u403d\0\u4074\0\u014a\0\u0528\0\u0528\0\u0528"+
    "\0\u40ab\0\u40e2\0\u4119\0\u4150\0\u014a\0\u4187\0\u0528\0\u41be"+
    "\0\u0528\0\u014a\0\u0528\0\u41f5\0\u422c\0\u014a\0\u0528\0\u014a"+
    "\0\u0528";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[417];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\7\1\12\1\7\1\13\1\14"+
    "\1\7\1\15\1\7\1\11\1\16\1\17\1\7\1\20"+
    "\1\21\1\22\1\23\2\11\1\24\1\25\1\26\1\11"+
    "\1\27\1\30\1\11\1\31\2\11\1\32\4\11\1\10"+
    "\1\0\20\7\1\11\1\33\1\34\5\33\1\35\1\33"+
    "\1\36\32\33\1\34\1\0\21\33\1\37\1\10\1\40"+
    "\1\37\1\41\1\42\1\43\1\14\1\37\1\44\1\45"+
    "\1\40\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\3\40\1\55\1\56\2\40\1\57\1\60\1\61\2\40"+
    "\1\62\2\40\1\63\1\40\1\10\1\0\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\37\1\40\1\103"+
    "\1\10\14\103\1\104\25\103\1\10\1\0\30\103\1\105"+
    "\34\103\2\0\22\103\1\10\5\103\1\14\34\103\1\10"+
    "\1\0\1\106\20\103\70\0\1\10\42\0\1\10\24\0"+
    "\3\11\6\0\1\11\1\0\1\11\4\0\4\11\1\0"+
    "\15\11\22\0\1\11\4\0\1\12\62\0\6\107\1\110"+
    "\1\0\1\111\56\107\12\0\1\112\3\0\1\113\100\0"+
    "\1\114\40\0\3\11\6\0\1\11\1\0\1\11\4\0"+
    "\4\11\1\0\1\11\1\115\13\11\22\0\1\11\2\0"+
    "\3\11\6\0\1\11\1\0\1\11\4\0\1\11\1\116"+
    "\2\11\1\0\1\11\1\117\4\11\1\120\6\11\22\0"+
    "\1\11\2\0\3\11\6\0\1\11\1\0\1\11\4\0"+
    "\4\11\1\0\1\11\1\121\13\11\22\0\1\11\24\0"+
    "\1\122\44\0\3\11\6\0\1\11\1\0\1\11\4\0"+
    "\2\11\1\123\1\11\1\0\15\11\22\0\1\11\2\0"+
    "\3\11\6\0\1\11\1\0\1\11\4\0\1\11\1\124"+
    "\2\11\1\0\15\11\22\0\1\11\2\0\3\11\6\0"+
    "\1\11\1\125\1\126\4\0\4\11\1\0\15\11\22\0"+
    "\1\11\2\0\3\11\6\0\1\11\1\0\1\11\4\0"+
    "\4\11\1\127\1\130\1\131\1\11\1\132\11\11\22\0"+
    "\1\11\2\0\3\11\6\0\1\11\1\0\1\11\4\0"+
    "\1\11\1\133\2\11\1\134\1\135\14\11\22\0\1\11"+
    "\1\0\1\34\42\0\1\34\34\0\1\136\3\0\1\113"+
    "\52\0\3\40\6\0\1\40\1\0\1\40\4\0\4\40"+
    "\1\0\15\40\22\0\1\40\4\0\1\41\1\137\61\0"+
    "\6\140\1\141\1\0\1\142\56\140\21\0\1\143\65\0"+
    "\1\144\100\0\1\145\36\0\3\40\6\0\1\40\1\0"+
    "\1\40\4\0\4\40\1\0\3\40\1\146\11\40\22\0"+
    "\1\40\21\0\1\147\64\0\1\150\26\0\1\151\41\0"+
    "\1\152\66\0\1\153\47\0\3\40\6\0\1\40\1\0"+
    "\1\40\4\0\4\40\1\0\4\40\1\154\2\40\1\155"+
    "\5\40\22\0\1\40\37\0\1\156\1\157\30\0\3\40"+
    "\6\0\1\40\1\0\1\40\4\0\4\40\1\0\10\40"+
    "\1\160\1\161\3\40\22\0\1\40\2\0\3\40\6\0"+
    "\1\40\1\0\1\40\4\0\1\162\3\40\1\0\7\40"+
    "\1\163\5\40\22\0\1\40\2\0\3\40\6\0\1\40"+
    "\1\0\1\40\4\0\4\40\1\0\3\40\1\164\11\40"+
    "\22\0\1\40\2\0\3\40\6\0\1\40\1\0\1\40"+
    "\4\0\4\40\1\0\4\40\1\165\10\40\22\0\1\40"+
    "\2\0\3\40\6\0\1\40\1\0\1\40\4\0\4\40"+
    "\1\0\1\40\1\166\13\40\22\0\1\40\2\0\3\40"+
    "\6\0\1\40\1\0\1\40\4\0\4\40\1\0\3\40"+
    "\1\167\11\40\22\0\1\40\63\0\1\170\67\0\1\171"+
    "\22\0\1\172\65\0\1\173\47\0\6\107\1\174\1\0"+
    "\1\111\56\107\13\0\1\175\111\0\1\176\32\0\3\11"+
    "\6\0\1\11\1\0\1\11\4\0\4\11\1\0\7\11"+
    "\1\177\5\11\22\0\1\11\2\0\3\11\6\0\1\11"+
    "\1\0\1\11\4\0\2\11\1\200\1\11\1\0\7\11"+
    "\1\201\5\11\22\0\1\11\2\0\3\11\6\0\1\11"+
    "\1\0\1\11\4\0\4\11\1\0\2\11\1\202\12\11"+
    "\22\0\1\11\2\0\3\11\6\0\1\11\1\0\1\11"+
    "\4\0\4\11\1\0\3\11\1\203\11\11\22\0\1\11"+
    "\2\0\3\11\6\0\1\11\1\0\1\11\4\0\4\11"+
    "\1\0\4\11\1\204\10\11\22\0\1\11\30\0\1\205"+
    "\40\0\3\11\6\0\1\11\1\0\1\11\4\0\4\11"+
    "\1\0\1\11\1\206\13\11\22\0\1\11\2\0\3\11"+
    "\6\0\1\11\1\0\1\11\4\0\4\11\1\0\5\11"+
    "\1\207\7\11\22\0\1\11\25\0\1\210\43\0\3\11"+
    "\6\0\1\11\1\0\1\11\4\0\3\11\1\211\1\0"+
    "\15\11\22\0\1\11\34\0\1\212\34\0\3\11\6\0"+
    "\1\11\1\0\1\11\4\0\4\11\1\0\5\11\1\213"+
    "\7\11\22\0\1\11\2\0\3\11\6\0\1\11\1\0"+
    "\1\11\4\0\4\11\1\0\2\11\1\214\12\11\22\0"+
    "\1\11\2\0\3\11\6\0\1\11\1\0\1\11\4\0"+
    "\4\11\1\0\14\11\1\215\22\0\1\11\2\0\3\11"+
    "\6\0\1\11\1\0\1\11\4\0\4\11\1\0\11\11"+
    "\1\216\3\11\22\0\1\11\36\0\1\217\32\0\3\11"+
    "\6\0\1\11\1\0\1\11\4\0\4\11\1\0\7\11"+
    "\1\220\5\11\22\0\1\11\13\0\1\221\57\0\1\222"+
    "\62\0\6\140\1\223\1\0\1\142\56\140\34\0\1\224"+
    "\34\0\3\40\6\0\1\40\1\0\1\40\4\0\4\40"+
    "\1\0\5\40\1\225\7\40\22\0\1\40\2\0\3\40"+
    "\6\0\1\40\1\0\1\40\4\0\4\40\1\0\3\40"+
    "\1\226\11\40\22\0\1\40\2\0\3\40\6\0\1\40"+
    "\1\0\1\40\4\0\4\40\1\227\1\230\14\40\22\0"+
    "\1\40\14\0\2\231\53\0\3\40\6\0\1\40\1\231"+
    "\1\232\4\0\4\40\1\0\15\40\22\0\1\40\2\0"+
    "\3\40\6\0\1\233\1\0\1\40\4\0\4\40\1\0"+
    "\15\40\22\0\1\40\2\0\3\40\6\0\1\40\1\234"+
    "\1\235\4\0\4\40\1\0\15\40\22\0\1\40\2\0"+
    "\3\40\6\0\1\40\1\0\1\40\4\0\3\40\1\236"+
    "\1\0\15\40\22\0\1\40\2\0\3\40\6\0\1\40"+
    "\1\0\1\40\4\0\4\40\1\0\6\40\1\237\6\40"+
    "\22\0\1\40\2\0\3\40\6\0\1\40\1\0\1\40"+
    "\4\0\4\40\1\0\7\40\1\240\5\40\22\0\1\40"+
    "\2\0\3\40\6\0\1\40\1\0\1\40\4\0\4\40"+
    "\1\0\5\40\1\241\7\40\22\0\1\40\14\0\2\242"+
    "\105\0\1\243\34\0\3\11\6\0\1\11\1\0\1\11"+
    "\4\0\4\11\1\0\5\11\1\244\7\11\22\0\1\11"+
    "\2\0\3\11\6\0\1\11\1\0\1\11\4\0\3\11"+
    "\1\245\1\0\15\11\22\0\1\11\2\0\3\11\6\0"+
    "\1\11\1\0\1\11\4\0\4\11\1\0\6\11\1\246"+
    "\6\11\22\0\1\11\2\0\3\11\6\0\1\11\1\0"+
    "\1\11\4\0\4\11\1\0\3\11\1\247\11\11\22\0"+
    "\1\11\2\0\3\11\6\0\1\11\1\0\1\11\4\0"+
    "\4\11\1\0\4\11\1\250\10\11\22\0\1\11\2\0"+
    "\3\11\6\0\1\11\1\0\1\11\4\0\4\11\1\0"+
    "\4\11\1\251\10\11\22\0\1\11\42\0\1\252\26\0"+
    "\3\11\6\0\1\11\1\0\1\11\4\0\4\11\1\0"+
    "\13\11\1\253\1\11\22\0\1\11\2\0\3\11\6\0"+
    "\1\11\1\0\1\11\4\0\1\11\1\254\2\11\1\0"+
    "\15\11\22\0\1\11\30\0\1\255\40\0\3\11\6\0"+
    "\1\11\1\0\1\11\4\0\4\11\1\0\1\11\1\256"+
    "\13\11\22\0\1\11\35\0\1\257\33\0\3\11\6\0"+
    "\1\11\1\0\1\11\4\0\4\11\1\0\6\11\1\260"+
    "\6\11\22\0\1\11\2\0\3\11\6\0\1\11\1\0"+
    "\1\11\4\0\4\11\1\0\7\11\1\261\5\11\22\0"+
    "\1\11\2\0\3\11\6\0\1\11\1\0\1\11\4\0"+
    "\4\11\1\0\5\11\1\262\7\11\22\0\1\11\2\0"+
    "\3\11\6\0\1\11\1\0\1\11\4\0\4\11\1\0"+
    "\12\11\1\263\2\11\22\0\1\11\30\0\1\264\40\0"+
    "\3\11\6\0\1\11\1\0\1\11\4\0\4\11\1\0"+
    "\1\11\1\265\13\11\22\0\1\11\14\0\2\266\73\0"+
    "\1\267\2\0\1\270\2\0\1\271\1\272\2\0\1\273"+
    "\34\0\3\40\6\0\1\40\1\0\1\40\4\0\1\274"+
    "\2\40\1\275\1\0\1\40\1\276\1\277\2\40\1\300"+
    "\7\40\22\0\1\40\2\0\3\40\6\0\1\40\1\0"+
    "\1\40\4\0\4\40\1\0\1\40\1\301\13\40\22\0"+
    "\1\40\22\0\1\302\46\0\3\40\6\0\1\40\1\0"+
    "\1\40\4\0\1\303\3\40\1\0\15\40\22\0\1\40"+
    "\32\0\1\304\36\0\3\40\6\0\1\40\1\0\1\40"+
    "\4\0\4\40\1\0\3\40\1\305\11\40\22\0\1\40"+
    "\2\0\3\40\6\0\1\40\1\0\1\40\4\0\1\40"+
    "\1\306\2\40\1\0\15\40\22\0\1\40\32\0\1\307"+
    "\36\0\3\40\6\0\1\40\1\0\1\40\4\0\4\40"+
    "\1\0\3\40\1\310\11\40\22\0\1\40\2\0\3\40"+
    "\6\0\1\40\1\0\1\40\4\0\4\40\1\0\3\40"+
    "\1\311\11\40\22\0\1\40\2\0\3\40\6\0\1\40"+
    "\1\0\1\40\4\0\4\40\1\0\3\40\1\312\11\40"+
    "\22\0\1\40\2\0\3\40\6\0\1\40\1\313\1\314"+
    "\4\0\4\40\1\0\15\40\22\0\1\40\2\0\3\40"+
    "\6\0\1\40\1\0\1\40\4\0\1\315\2\40\1\316"+
    "\1\0\1\40\1\317\3\40\1\320\7\40\22\0\1\40"+
    "\23\0\1\321\45\0\3\11\6\0\1\11\1\0\1\11"+
    "\4\0\1\11\1\322\2\11\1\0\15\11\22\0\1\11"+
    "\2\0\3\11\6\0\1\11\1\0\1\11\4\0\4\11"+
    "\1\323\1\324\14\11\22\0\1\11\2\0\3\11\6\0"+
    "\1\11\1\0\1\11\4\0\2\11\1\325\1\11\1\0"+
    "\15\11\22\0\1\11\2\0\3\11\6\0\1\11\1\0"+
    "\1\11\4\0\1\326\3\11\1\0\15\11\22\0\1\11"+
    "\2\0\3\11\6\0\1\11\1\0\1\11\4\0\3\11"+
    "\1\327\1\0\15\11\22\0\1\11\2\0\3\11\6\0"+
    "\1\11\1\0\1\11\4\0\4\11\1\0\1\11\1\330"+
    "\13\11\22\0\1\11\32\0\1\331\36\0\3\11\6\0"+
    "\1\11\1\0\1\11\4\0\4\11\1\0\3\11\1\332"+
    "\11\11\22\0\1\11\2\0\3\11\6\0\1\11\1\0"+
    "\1\11\4\0\4\11\1\0\11\11\1\333\3\11\22\0"+
    "\1\11\22\0\1\334\46\0\3\11\6\0\1\11\1\0"+
    "\1\11\4\0\1\335\3\11\1\0\15\11\22\0\1\11"+
    "\36\0\1\336\32\0\3\11\6\0\1\11\1\0\1\11"+
    "\4\0\4\11\1\0\7\11\1\337\5\11\22\0\1\11"+
    "\2\0\3\11\6\0\1\11\1\0\1\11\4\0\4\11"+
    "\1\0\1\11\1\340\13\11\22\0\1\11\2\0\3\11"+
    "\6\0\1\11\1\0\1\11\4\0\1\11\1\341\2\11"+
    "\1\0\15\11\22\0\1\11\2\0\3\11\6\0\1\11"+
    "\1\0\1\11\4\0\1\11\1\342\2\11\1\0\15\11"+
    "\22\0\1\11\23\0\1\343\73\0\1\344\74\0\1\345"+
    "\1\0\1\346\51\0\1\347\75\0\1\350\36\0\3\40"+
    "\6\0\1\40\1\0\1\40\4\0\1\40\1\351\2\40"+
    "\1\0\15\40\22\0\1\40\2\0\3\40\6\0\1\40"+
    "\1\0\1\40\4\0\4\40\1\0\1\40\1\352\13\40"+
    "\22\0\1\40\2\0\3\40\6\0\1\40\1\0\1\40"+
    "\4\0\4\40\1\0\7\40\1\353\1\40\1\354\3\40"+
    "\22\0\1\40\2\0\3\40\6\0\1\40\1\0\1\40"+
    "\4\0\1\40\1\355\2\40\1\0\15\40\22\0\1\40"+
    "\2\0\3\40\6\0\1\40\1\0\1\40\4\0\4\40"+
    "\1\0\3\40\1\356\11\40\22\0\1\40\2\0\3\40"+
    "\6\0\1\40\1\0\1\40\4\0\4\40\1\0\4\40"+
    "\1\357\10\40\22\0\1\40\65\0\2\360\2\0\3\40"+
    "\6\0\1\40\1\0\1\40\4\0\4\40\1\0\15\40"+
    "\21\0\1\360\1\361\33\0\1\362\35\0\3\40\6\0"+
    "\1\40\1\0\1\40\4\0\4\40\1\0\4\40\1\363"+
    "\10\40\22\0\1\40\2\0\3\40\6\0\1\40\1\0"+
    "\1\40\4\0\4\40\1\0\5\40\1\364\7\40\22\0"+
    "\1\40\32\0\1\365\36\0\3\40\6\0\1\40\1\0"+
    "\1\40\4\0\4\40\1\0\3\40\1\366\11\40\22\0"+
    "\1\40\2\0\3\40\6\0\1\40\1\0\1\40\4\0"+
    "\1\40\1\367\2\40\1\0\15\40\22\0\1\40\2\0"+
    "\3\40\6\0\1\40\1\0\1\40\4\0\4\40\1\0"+
    "\1\40\1\370\13\40\22\0\1\40\2\0\3\40\6\0"+
    "\1\40\1\0\1\40\4\0\4\40\1\0\7\40\1\371"+
    "\1\40\1\372\3\40\22\0\1\40\2\0\3\40\6\0"+
    "\1\40\1\0\1\40\4\0\4\40\1\0\3\40\1\373"+
    "\11\40\22\0\1\40\2\0\3\11\6\0\1\11\1\0"+
    "\1\11\4\0\4\11\1\0\11\11\1\374\3\11\22\0"+
    "\1\11\2\0\3\11\6\0\1\11\1\0\1\11\4\0"+
    "\4\11\1\0\3\11\1\375\11\11\22\0\1\11\2\0"+
    "\3\11\6\0\1\11\1\0\1\11\4\0\1\11\1\376"+
    "\2\11\1\0\15\11\22\0\1\11\2\0\3\11\6\0"+
    "\1\11\1\0\1\11\4\0\4\11\1\0\10\11\1\377"+
    "\4\11\22\0\1\11\40\0\1\u0100\30\0\3\11\6\0"+
    "\1\11\1\0\1\11\4\0\4\11\1\0\11\11\1\u0101"+
    "\3\11\22\0\1\11\26\0\2\u0102\41\0\3\11\6\0"+
    "\1\11\1\0\1\11\4\0\4\11\1\u0102\1\u0103\14\11"+
    "\22\0\1\11\23\0\1\u0104\45\0\3\11\6\0\1\11"+
    "\1\0\1\11\4\0\1\11\1\u0105\2\11\1\0\15\11"+
    "\22\0\1\11\2\0\3\11\6\0\1\11\1\0\1\11"+
    "\4\0\4\11\1\0\1\11\1\u0106\1\u0107\12\11\22\0"+
    "\1\11\40\0\1\u0108\62\0\1\u0109\60\0\2\u010a\4\0"+
    "\1\u010b\54\0\1\u010c\77\0\1\u010d\76\0\1\u010e\25\0"+
    "\3\40\6\0\1\40\1\0\1\40\4\0\4\40\1\0"+
    "\11\40\1\u010f\3\40\22\0\1\40\2\0\3\40\6\0"+
    "\1\40\1\0\1\40\4\0\4\40\1\0\5\40\1\u0110"+
    "\7\40\22\0\1\40\2\0\3\40\6\0\1\40\1\0"+
    "\1\40\4\0\4\40\1\u010a\1\u0111\4\40\1\u0112\7\40"+
    "\22\0\1\40\2\0\3\40\6\0\1\40\1\0\1\40"+
    "\4\0\1\u0113\3\40\1\0\15\40\22\0\1\40\2\0"+
    "\3\40\6\0\1\40\1\0\1\40\4\0\4\40\1\0"+
    "\4\40\1\u0114\10\40\22\0\1\40\2\0\3\40\6\0"+
    "\1\40\1\0\1\40\4\0\4\40\1\0\14\40\1\u0115"+
    "\22\0\1\40\2\0\3\40\6\0\1\40\1\0\1\40"+
    "\4\0\3\40\1\u0116\1\u0117\1\u0118\1\40\1\u0119\2\40"+
    "\1\u011a\7\40\22\0\1\40\31\0\1\u011b\37\0\3\40"+
    "\6\0\1\40\1\0\1\40\4\0\4\40\1\0\2\40"+
    "\1\u011c\12\40\22\0\1\40\34\0\1\u011d\34\0\3\40"+
    "\6\0\1\40\1\0\1\40\4\0\4\40\1\0\5\40"+
    "\1\u011e\7\40\22\0\1\40\2\0\3\40\6\0\1\40"+
    "\1\0\1\40\4\0\4\40\1\u011f\1\u0120\14\40\22\0"+
    "\1\40\2\0\3\40\6\0\1\40\1\0\1\40\4\0"+
    "\4\40\1\0\11\40\1\u0121\3\40\22\0\1\40\2\0"+
    "\3\40\6\0\1\40\1\0\1\40\4\0\4\40\1\0"+
    "\5\40\1\u0122\7\40\22\0\1\40\2\0\3\40\6\0"+
    "\1\40\1\0\1\40\4\0\4\40\1\u0123\1\u0124\4\40"+
    "\1\u0125\7\40\22\0\1\40\2\0\3\40\6\0\1\40"+
    "\1\0\1\40\4\0\1\u0126\3\40\1\0\15\40\22\0"+
    "\1\40\2\0\3\40\6\0\1\40\1\0\1\40\4\0"+
    "\4\40\1\0\14\40\1\u0127\22\0\1\40\2\0\3\11"+
    "\6\0\1\11\1\0\1\11\4\0\4\11\1\0\1\11"+
    "\1\u0128\13\11\22\0\1\11\2\0\3\11\6\0\1\11"+
    "\1\0\1\11\4\0\4\11\1\0\4\11\1\u0129\10\11"+
    "\22\0\1\11\2\0\3\11\6\0\1\11\1\0\1\11"+
    "\4\0\1\11\1\u012a\2\11\1\0\15\11\22\0\1\11"+
    "\23\0\1\u012b\45\0\3\11\6\0\1\11\1\0\1\11"+
    "\4\0\1\11\1\u012c\2\11\1\0\15\11\22\0\1\11"+
    "\34\0\1\u012d\45\0\1\u012e\113\0\1\u012f\51\0\1\u0130"+
    "\56\0\1\u0131\114\0\1\u0132\61\0\1\u0133\34\0\3\40"+
    "\6\0\1\40\1\0\1\40\4\0\4\40\1\0\5\40"+
    "\1\u0134\7\40\22\0\1\40\2\0\3\40\6\0\1\u0135"+
    "\1\0\1\40\4\0\4\40\1\0\15\40\22\0\1\40"+
    "\2\0\3\40\6\0\1\40\1\0\1\40\4\0\4\40"+
    "\1\0\11\40\1\u0136\3\40\22\0\1\40\2\0\3\40"+
    "\6\0\1\40\1\0\1\40\4\0\1\40\1\u0137\2\40"+
    "\1\0\15\40\22\0\1\40\2\0\3\40\6\0\1\u0138"+
    "\1\0\1\40\4\0\4\40\1\0\15\40\22\0\1\40"+
    "\2\0\3\40\6\0\1\40\1\0\1\40\4\0\4\40"+
    "\1\0\12\40\1\u0139\2\40\22\0\1\40\2\0\3\40"+
    "\6\0\1\40\1\0\1\40\4\0\4\40\1\0\5\40"+
    "\1\u013a\7\40\22\0\1\40\2\0\3\40\6\0\1\40"+
    "\1\0\1\40\4\0\4\40\1\0\1\40\1\u013b\13\40"+
    "\22\0\1\40\24\0\1\u013c\44\0\3\40\6\0\1\40"+
    "\1\0\1\40\4\0\2\40\1\u013d\1\40\1\0\15\40"+
    "\22\0\1\40\2\0\3\40\6\0\1\40\1\0\1\40"+
    "\4\0\1\40\1\u013e\2\40\1\0\15\40\22\0\1\40"+
    "\2\0\3\40\6\0\1\40\1\0\1\40\4\0\4\40"+
    "\1\0\1\40\1\u013f\1\40\1\u0140\11\40\22\0\1\40"+
    "\23\0\1\u0141\45\0\3\40\6\0\1\40\1\0\1\40"+
    "\4\0\1\40\1\u0142\2\40\1\0\15\40\22\0\1\40"+
    "\30\0\1\u0143\40\0\3\40\6\0\1\40\1\0\1\40"+
    "\4\0\4\40\1\0\1\40\1\u0144\13\40\22\0\1\40"+
    "\33\0\1\u0145\35\0\3\40\6\0\1\40\1\0\1\40"+
    "\4\0\4\40\1\0\4\40\1\u0146\10\40\22\0\1\40"+
    "\2\0\3\40\6\0\1\40\1\0\1\40\4\0\4\40"+
    "\1\0\5\40\1\u0147\7\40\22\0\1\40\2\0\3\40"+
    "\6\0\1\u0148\1\0\1\40\4\0\4\40\1\0\15\40"+
    "\22\0\1\40\40\0\1\u0149\30\0\3\40\6\0\1\40"+
    "\1\0\1\40\4\0\4\40\1\0\11\40\1\u014a\3\40"+
    "\22\0\1\40\2\0\3\40\6\0\1\40\1\0\1\40"+
    "\4\0\1\40\1\u014b\2\40\1\0\15\40\22\0\1\40"+
    "\2\0\3\40\6\0\1\u014c\1\0\1\40\4\0\4\40"+
    "\1\0\15\40\22\0\1\40\2\0\3\40\6\0\1\40"+
    "\1\0\1\40\4\0\4\40\1\0\5\40\1\u014d\7\40"+
    "\22\0\1\40\2\0\3\11\6\0\1\11\1\0\1\11"+
    "\4\0\1\u014e\3\11\1\0\15\11\22\0\1\11\2\0"+
    "\3\11\6\0\1\11\1\0\1\11\4\0\4\11\1\0"+
    "\1\11\1\u014f\13\11\22\0\1\11\32\0\1\u0150\66\0"+
    "\1\u0151\57\0\1\u0152\75\0\1\u0153\57\0\1\u0154\45\0"+
    "\3\40\6\0\1\40\1\0\1\40\4\0\4\40\1\0"+
    "\3\40\1\u0155\11\40\22\0\1\40\2\0\3\40\6\0"+
    "\1\40\1\0\1\40\4\0\4\40\1\0\3\40\1\u0156"+
    "\11\40\22\0\1\40\2\0\3\40\6\0\1\40\1\0"+
    "\1\40\4\0\1\40\1\u0157\2\40\1\0\15\40\22\0"+
    "\1\40\2\0\3\40\6\0\1\40\1\0\1\40\4\0"+
    "\4\40\1\0\3\40\1\u0158\11\40\22\0\1\40\2\0"+
    "\3\40\6\0\1\40\1\0\1\40\4\0\1\40\1\u0159"+
    "\2\40\1\0\15\40\22\0\1\40\2\0\3\40\6\0"+
    "\1\40\1\0\1\40\4\0\4\40\1\0\4\40\1\u015a"+
    "\10\40\22\0\1\40\30\0\1\u015b\40\0\3\40\6\0"+
    "\1\40\1\0\1\40\4\0\4\40\1\0\1\40\1\u015c"+
    "\13\40\22\0\1\40\2\0\3\40\6\0\1\40\1\0"+
    "\1\40\4\0\4\40\1\0\5\40\1\u015d\7\40\22\0"+
    "\1\40\2\0\3\40\6\0\1\40\1\0\1\40\4\0"+
    "\4\40\1\0\2\40\1\u015e\12\40\22\0\1\40\2\0"+
    "\3\40\6\0\1\40\1\0\1\40\4\0\4\40\1\0"+
    "\14\40\1\u015f\22\0\1\40\34\0\1\u0160\34\0\3\40"+
    "\6\0\1\40\1\0\1\40\4\0\4\40\1\0\5\40"+
    "\1\u0161\7\40\22\0\1\40\33\0\1\u0162\35\0\3\40"+
    "\6\0\1\40\1\0\1\40\4\0\4\40\1\0\4\40"+
    "\1\u0163\10\40\22\0\1\40\2\0\3\40\6\0\1\40"+
    "\1\0\1\40\4\0\4\40\1\0\3\40\1\u0164\11\40"+
    "\22\0\1\40\32\0\1\u0165\36\0\3\40\6\0\1\40"+
    "\1\0\1\40\4\0\4\40\1\0\3\40\1\u0166\11\40"+
    "\22\0\1\40\2\0\3\40\6\0\1\40\1\0\1\40"+
    "\4\0\1\40\1\u0167\2\40\1\0\15\40\22\0\1\40"+
    "\2\0\3\40\6\0\1\40\1\0\1\40\4\0\1\40"+
    "\1\u0168\2\40\1\0\15\40\22\0\1\40\40\0\1\u0169"+
    "\56\0\1\u016a\40\0\3\40\6\0\1\40\1\0\1\40"+
    "\4\0\4\40\1\0\11\40\1\u016b\3\40\22\0\1\40"+
    "\2\0\3\40\6\0\1\40\1\0\1\40\4\0\4\40"+
    "\1\0\1\40\1\u016c\13\40\22\0\1\40\2\0\3\40"+
    "\6\0\1\40\1\0\1\40\4\0\4\40\1\0\4\40"+
    "\1\u016d\10\40\22\0\1\40\42\0\1\u016e\26\0\3\40"+
    "\6\0\1\40\1\0\1\40\4\0\4\40\1\0\13\40"+
    "\1\u016f\1\40\22\0\1\40\2\0\3\40\6\0\1\40"+
    "\1\0\1\40\4\0\1\40\1\u0170\2\40\1\0\15\40"+
    "\22\0\1\40\2\0\3\40\6\0\1\40\1\0\1\40"+
    "\4\0\4\40\1\0\7\40\1\u0171\5\40\22\0\1\40"+
    "\2\0\3\40\6\0\1\40\1\0\1\40\4\0\4\40"+
    "\1\0\5\40\1\u0172\7\40\22\0\1\40\23\0\1\u0173"+
    "\45\0\3\40\6\0\1\40\1\0\1\40\4\0\1\40"+
    "\1\u0174\2\40\1\0\15\40\22\0\1\40\2\0\3\40"+
    "\6\0\1\40\1\0\1\40\4\0\4\40\1\0\11\40"+
    "\1\u0175\3\40\22\0\1\40\30\0\1\u0176\40\0\3\40"+
    "\6\0\1\40\1\0\1\40\4\0\4\40\1\0\1\40"+
    "\1\u0177\13\40\22\0\1\40\26\0\2\u0178\61\0\1\u0179"+
    "\46\0\3\40\6\0\1\40\1\0\1\40\4\0\4\40"+
    "\1\u0178\1\u017a\14\40\22\0\1\40\2\0\3\40\6\0"+
    "\1\40\1\0\1\40\4\0\1\u017b\3\40\1\0\15\40"+
    "\22\0\1\40\2\0\3\40\6\0\1\40\1\0\1\40"+
    "\4\0\4\40\1\0\1\40\1\u017c\13\40\22\0\1\40"+
    "\32\0\1\u017d\36\0\3\40\6\0\1\40\1\0\1\40"+
    "\4\0\4\40\1\0\3\40\1\u017e\11\40\22\0\1\40"+
    "\2\0\3\40\6\0\1\40\1\0\1\40\4\0\4\40"+
    "\1\0\11\40\1\u017f\3\40\22\0\1\40\2\0\3\40"+
    "\6\0\1\40\1\0\1\40\4\0\4\40\1\0\1\40"+
    "\1\u0180\13\40\22\0\1\40\2\0\3\40\6\0\1\40"+
    "\1\0\1\40\4\0\1\40\1\u0181\2\40\1\0\15\40"+
    "\22\0\1\40\40\0\1\u0182\30\0\3\40\6\0\1\40"+
    "\1\0\1\40\4\0\4\40\1\0\11\40\1\u0183\3\40"+
    "\22\0\1\40\2\0\3\40\6\0\1\40\1\0\1\40"+
    "\4\0\4\40\1\u0184\1\u0185\14\40\22\0\1\40\22\0"+
    "\1\u0186\46\0\3\40\6\0\1\40\1\0\1\40\4\0"+
    "\1\u0187\3\40\1\0\15\40\22\0\1\40\41\0\1\u0188"+
    "\53\0\2\u0189\41\0\3\40\6\0\1\40\1\0\1\40"+
    "\4\0\4\40\1\0\12\40\1\u018a\2\40\22\0\1\40"+
    "\2\0\3\40\6\0\1\40\1\0\1\40\4\0\4\40"+
    "\1\u0189\1\u018b\14\40\22\0\1\40\2\0\3\40\6\0"+
    "\1\40\1\0\1\40\4\0\4\40\1\0\10\40\1\u018c"+
    "\4\40\22\0\1\40\40\0\1\u018d\30\0\3\40\6\0"+
    "\1\40\1\0\1\40\4\0\4\40\1\0\11\40\1\u018e"+
    "\3\40\22\0\1\40\2\0\3\40\6\0\1\40\1\0"+
    "\1\40\4\0\4\40\1\0\1\40\1\u018f\1\u0190\12\40"+
    "\22\0\1\40\41\0\1\u0191\27\0\3\40\6\0\1\40"+
    "\1\0\1\40\4\0\4\40\1\0\12\40\1\u0192\2\40"+
    "\22\0\1\40\26\0\2\u0193\41\0\3\40\6\0\1\40"+
    "\1\0\1\40\4\0\4\40\1\u0193\1\u0194\14\40\22\0"+
    "\1\40\23\0\1\u0195\66\0\1\u0196\45\0\3\40\6\0"+
    "\1\40\1\0\1\40\4\0\1\40\1\u0197\2\40\1\0"+
    "\15\40\22\0\1\40\2\0\3\40\6\0\1\40\1\0"+
    "\1\40\4\0\1\40\1\u0198\2\40\1\0\15\40\22\0"+
    "\1\40\2\0\3\40\6\0\1\40\1\0\1\40\4\0"+
    "\1\40\1\u0199\2\40\1\0\15\40\22\0\1\40\23\0"+
    "\1\u019a\45\0\3\40\6\0\1\40\1\0\1\40\4\0"+
    "\1\40\1\u019b\2\40\1\0\15\40\22\0\1\40\23\0"+
    "\1\u019c\45\0\3\40\6\0\1\40\1\0\1\40\4\0"+
    "\1\40\1\u019d\2\40\1\0\15\40\22\0\1\40\40\0"+
    "\1\u019e\30\0\3\40\6\0\1\40\1\0\1\40\4\0"+
    "\4\40\1\0\11\40\1\u019f\3\40\22\0\1\40\40\0"+
    "\1\u01a0\30\0\3\40\6\0\1\40\1\0\1\40\4\0"+
    "\4\40\1\0\11\40\1\u01a1\3\40\22\0\1\40";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16995];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\4\1\1\11\3\1\3\11\10\1\1\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\11\21\1\15\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\0\1\11\2\0"+
    "\1\11\1\0\5\1\1\0\2\1\1\0\1\1\1\0"+
    "\4\1\1\0\1\1\3\0\1\11\1\0\2\11\1\0"+
    "\1\1\5\11\2\1\1\11\1\0\10\1\4\11\1\1"+
    "\2\0\6\1\1\0\2\1\1\0\1\1\1\0\4\1"+
    "\1\0\1\1\1\0\2\1\1\0\2\1\1\0\1\1"+
    "\1\0\2\1\1\0\5\1\1\11\1\0\6\1\1\0"+
    "\2\1\1\0\1\1\1\0\4\1\1\11\1\1\1\11"+
    "\5\0\6\1\1\0\1\1\1\0\2\1\1\11\3\1"+
    "\1\0\5\1\1\11\1\1\1\11\5\1\1\0\2\1"+
    "\1\0\1\1\1\0\4\1\6\0\7\1\1\0\1\1"+
    "\1\0\2\1\1\11\12\1\1\11\1\1\1\0\1\1"+
    "\1\11\3\1\7\0\10\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\1\1\0\3\1\1\0\7\1\1\11\1\1"+
    "\1\0\1\11\1\0\1\11\3\0\10\1\1\0\4\1"+
    "\1\0\1\1\1\0\1\1\1\11\3\1\1\0\6\1"+
    "\2\0\3\11\6\1\1\0\4\1\1\0\1\1\1\11"+
    "\2\1\1\0\3\1\2\0\3\1\1\0\4\1\1\0"+
    "\2\1\1\0\1\1\2\0\3\1\1\0\4\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\2\0\3\1\1\11"+
    "\3\1\1\0\1\1\1\0\1\1\1\11\1\0\3\1"+
    "\1\11\1\1\1\0\1\1\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[417];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer cadenaTemp = new StringBuffer();
    boolean entro = false;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
      yyline = 0;
    yychar = 0;
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { errorLexer.add(new Pojos.err(yyline,yychar,"Lexico",yytext()));
        System.err.println("Este es un error lexico: "+yytext()+", en la linea: "+yyline+", en la columna: "+yychar);
            } 
            // fall through
          case 97: break;
          case 2: 
            { 
            } 
            // fall through
          case 98: break;
          case 3: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Id")); return new Symbol(sym.ID,yyline,yychar,yytext());
            } 
            // fall through
          case 99: break;
          case 4: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Numero")); return new Symbol(sym.NUM,yyline,yychar,yytext());
            } 
            // fall through
          case 100: break;
          case 5: 
            { yychar=0;
            } 
            // fall through
          case 101: break;
          case 6: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo")); return new Symbol(sym.TEXTO,yyline,yychar,yytext());
            } 
            // fall through
          case 102: break;
          case 7: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo")); return new Symbol(sym.SLASH,yyline,yychar,yytext());
            } 
            // fall through
          case 103: break;
          case 8: 
            { entro=false; token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo")); cadenaTemp.setLength(0); yybegin(TEXTO); return new Symbol(sym.CIERRA_ETIQUETA,yyline,yychar,yytext());
            } 
            // fall through
          case 104: break;
          case 9: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo")); return new Symbol(sym.IGUAL,yyline,yychar,yytext());
            } 
            // fall through
          case 105: break;
          case 10: 
            { entro =true;
        cadenaTemp.append(yytext());
            } 
            // fall through
          case 106: break;
          case 11: 
            { cadenaTemp.append(" ");
            } 
            // fall through
          case 107: break;
          case 12: 
            { yychar=0; cadenaTemp.append("\n");
            } 
            // fall through
          case 108: break;
          case 13: 
            { yybegin(YYINITIAL);
        if(entro){
            token.add(new Pojos.Token(yyline,yychar,cadenaTemp.toString(),"Texto"));
            token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));
            cadenaTemp.append("<");
            return new Symbol(sym.TEXTO,yyline,yychar,cadenaTemp.toString());
        }
        else {
            token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));
            return new Symbol(sym.TEXTO,yyline,yychar,yytext());
            }
            } 
            // fall through
          case 109: break;
          case 14: 
            { errorLexer.add(new Pojos.err(yyline,yychar,"Lexico",yytext()));

        System.err.println("Este es un error lexico: "+yytext()+", en la linea: "+yyline+", en la columna: "+yychar);
            } 
            // fall through
          case 110: break;
          case 15: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Variable"));return new Symbol(sym.VARIABLE,yyline,yychar,yytext());
            } 
            // fall through
          case 111: break;
          case 16: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Numero")); return new Symbol(sym.ENTERO,yyline,yychar,yytext());
            } 
            // fall through
          case 112: break;
          case 17: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.CONCATENACION,yyline,yychar, yytext());
            } 
            // fall through
          case 113: break;
          case 18: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.MENOR,yyline,yychar, yytext());
            } 
            // fall through
          case 114: break;
          case 19: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo")); return new Symbol(sym.NOT,yyline,yychar, yytext());
            } 
            // fall through
          case 115: break;
          case 20: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.ENTRE,yyline,yychar, yytext());
            } 
            // fall through
          case 116: break;
          case 21: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.MAYOR,yyline,yychar, yytext());
            } 
            // fall through
          case 117: break;
          case 22: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.IGUAL,yyline,yychar,yytext());
            } 
            // fall through
          case 118: break;
          case 23: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.POR,yyline,yychar, yytext());
            } 
            // fall through
          case 119: break;
          case 24: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.PUNTOYCOMA,yyline,yychar, yytext());
            } 
            // fall through
          case 120: break;
          case 25: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.COMA,yyline,yychar, yytext());
            } 
            // fall through
          case 121: break;
          case 26: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.MAS,yyline,yychar, yytext());
            } 
            // fall through
          case 122: break;
          case 27: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.MENOS,yyline,yychar, yytext());
            } 
            // fall through
          case 123: break;
          case 28: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.ABRE,yyline,yychar, yytext());
            } 
            // fall through
          case 124: break;
          case 29: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.CIERRA,yyline,yychar, yytext());
            } 
            // fall through
          case 125: break;
          case 30: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.VAR1,yyline,yychar,yytext());
            } 
            // fall through
          case 126: break;
          case 31: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.VAR2,yyline,yychar,yytext());
            } 
            // fall through
          case 127: break;
          case 32: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo")); return new Symbol(sym.LLAVEIZQUIERDA,yyline,yychar, yytext());
            } 
            // fall through
          case 128: break;
          case 33: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo")); return new Symbol(sym.LLAVEDERECHA,yyline,yychar, yytext());
            } 
            // fall through
          case 129: break;
          case 34: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo")); return new Symbol(sym.CORCHETEIZQUIERDA,yyline,yychar, yytext());
            } 
            // fall through
          case 130: break;
          case 35: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo")); return new Symbol(sym.CORCHETEDERECHA,yyline,yychar, yytext());
            } 
            // fall through
          case 131: break;
          case 36: 
            { yychar=0; yybegin(HS_STATE);
            } 
            // fall through
          case 132: break;
          case 37: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Cadena")); return new Symbol(sym.CADENA,yyline,yychar,yytext());
            } 
            // fall through
          case 133: break;
          case 38: 
            { yybegin(COM_HTML);
            } 
            // fall through
          case 134: break;
          case 39: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Cadena"));return new Symbol(sym.CADENA,yyline,yychar,yytext());
            } 
            // fall through
          case 135: break;
          case 40: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.MENOR_IGUAL,yyline,yychar, yytext());
            } 
            // fall through
          case 136: break;
          case 41: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Cierra Hs")); yybegin(YYINITIAL); return new Symbol(sym.R_CIERRAHS,yyline,yychar, yytext());
            } 
            // fall through
          case 137: break;
          case 42: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.DESIGUAL,yyline,yychar, yytext());
            } 
            // fall through
          case 138: break;
          case 43: 
            { yybegin(COM_LIN);
            } 
            // fall through
          case 139: break;
          case 44: 
            { yybegin(COM_MLIN);
            } 
            // fall through
          case 140: break;
          case 45: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.MAYOR_IGUAL,yyline,yychar, yytext());
            } 
            // fall through
          case 141: break;
          case 46: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.IGUAL_LOGICO,yyline,yychar, yytext());
            } 
            // fall through
          case 142: break;
          case 47: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_IF,yyline,yychar,yytext());
            } 
            // fall through
          case 143: break;
          case 48: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo")); return new Symbol(sym.AND,yyline,yychar, yytext());
            } 
            // fall through
          case 144: break;
          case 49: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo")); return new Symbol(sym.OR,yyline,yychar, yytext());
            } 
            // fall through
          case 145: break;
          case 50: 
            { yybegin(TEXTO);
            } 
            // fall through
          case 146: break;
          case 51: 
            { yybegin(HS_STATE);
            } 
            // fall through
          case 147: break;
          case 52: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Decmal")); return new Symbol(sym.DECIMAL,yyline,yychar,yytext());
            } 
            // fall through
          case 148: break;
          case 53: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Abre Hs"));  yybegin(HS_STATE); return new Symbol(sym.ABRE_HS,yyline,yychar,yytext());
            } 
            // fall through
          case 149: break;
          case 54: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_FILA,yyline,yychar,yytext());
            } 
            // fall through
          case 150: break;
          case 55: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Abre Hs")); yybegin(HS_STATE); return new Symbol(sym.ABRE_HS,yyline,yychar,yytext());
            } 
            // fall through
          case 151: break;
          case 56: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_ECHO,yyline,yychar,yytext());
            } 
            // fall through
          case 152: break;
          case 57: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_ELSE,yyline,yychar,yytext());
            } 
            // fall through
          case 153: break;
          case 58: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_TRUE,yyline,yychar,yytext());
            } 
            // fall through
          case 154: break;
          case 59: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_SALTO,yyline,yychar,yytext());
            } 
            // fall through
          case 155: break;
          case 60: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_COMPI,yyline,yychar,yytext());
            } 
            // fall through
          case 156: break;
          case 61: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_BOTON,yyline,yychar,yytext());
            } 
            // fall through
          case 157: break;
          case 62: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_TABLA,yyline,yychar,yytext());
            } 
            // fall through
          case 158: break;
          case 63: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_FONDO,yyline,yychar,yytext());
            } 
            // fall through
          case 159: break;
          case 64: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_FALSE,yyline,yychar,yytext());
            } 
            // fall through
          case 160: break;
          case 65: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_CUERPO,yyline,yychar,yytext());
            } 
            // fall through
          case 161: break;
          case 66: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_IMAGEN,yyline,yychar,yytext());
            } 
            // fall through
          case 162: break;
          case 67: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_TITULO,yyline,yychar,yytext());
            } 
            // fall through
          case 163: break;
          case 68: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_TEXTOA,yyline,yychar,yytext());
            } 
            // fall through
          case 164: break;
          case 69: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_TEXTOB,yyline,yychar,yytext());
            } 
            // fall through
          case 165: break;
          case 70: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_COLUMNA,yyline,yychar,yytext());
            } 
            // fall through
          case 166: break;
          case 71: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_PARRAFO,yyline,yychar,yytext());
            } 
            // fall through
          case 167: break;
          case 72: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_ESPACIO,yyline,yychar,yytext());
            } 
            // fall through
          case 168: break;
          case 73: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_SETPATH,yyline,yychar,yytext());
            } 
            // fall through
          case 169: break;
          case 74: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_SETALTO,yyline,yychar,yytext());
            } 
            // fall through
          case 170: break;
          case 75: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_REPETIR,yyline,yychar,yytext());
            } 
            // fall through
          case 171: break;
          case 76: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_GETPATH,yyline,yychar,yytext());
            } 
            // fall through
          case 172: break;
          case 77: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_GETALTO,yyline,yychar,yytext());
            } 
            // fall through
          case 173: break;
          case 78: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_COLUMNAC,yyline,yychar,yytext());
            } 
            // fall through
          case 174: break;
          case 79: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_CABECERA,yyline,yychar,yytext());
            } 
            // fall through
          case 175: break;
          case 80: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_SETANCHO,yyline,yychar,yytext());
            } 
            // fall through
          case 176: break;
          case 81: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_SETBORDE,yyline,yychar,yytext());
            } 
            // fall through
          case 177: break;
          case 82: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_SETTEXTO,yyline,yychar,yytext());
            } 
            // fall through
          case 178: break;
          case 83: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_INSERTAR,yyline,yychar,yytext());
            } 
            // fall through
          case 179: break;
          case 84: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_GETANCHO,yyline,yychar,yytext());
            } 
            // fall through
          case 180: break;
          case 85: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_GETTEXTO,yyline,yychar,yytext());
            } 
            // fall through
          case 181: break;
          case 86: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_CREARBOTON,yyline,yychar,yytext());
            } 
            // fall through
          case 182: break;
          case 87: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_CREARTABLA,yyline,yychar,yytext());
            } 
            // fall through
          case 183: break;
          case 88: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_CLICKBOTON,yyline,yychar,yytext());
            } 
            // fall through
          case 184: break;
          case 89: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_CREARIMAGEN,yyline,yychar,yytext());
            } 
            // fall through
          case 185: break;
          case 90: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_CREARTEXTOA,yyline,yychar,yytext());
            } 
            // fall through
          case 186: break;
          case 91: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_CREARTEXTOB,yyline,yychar,yytext());
            } 
            // fall through
          case 187: break;
          case 92: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_SETCONTENIDO,yyline,yychar,yytext());
            } 
            // fall through
          case 188: break;
          case 93: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_CREARPARRAFO,yyline,yychar,yytext());
            } 
            // fall through
          case 189: break;
          case 94: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_GETCONTENIDO,yyline,yychar,yytext());
            } 
            // fall through
          case 190: break;
          case 95: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_SETALINEACION,yyline,yychar,yytext());
            } 
            // fall through
          case 191: break;
          case 96: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_GETALINEACION,yyline,yychar,yytext());
            } 
            // fall through
          case 192: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
