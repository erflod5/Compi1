
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;
import java.util.Objects;
import java.util.ArrayList;
import statement.*;
import Pojos.*;
import java_cup.runtime.XMLElement;
import static proyecto1_c1.Principal.lista_variable;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\210\000\002\002\004\000\002\002\012\000\002\003" +
    "\004\000\002\003\003\000\002\004\012\000\002\004\011" +
    "\000\002\004\013\000\002\004\012\000\002\010\005\000" +
    "\002\010\002\000\002\005\011\000\002\006\004\000\002" +
    "\006\003\000\002\007\012\000\002\007\006\000\002\007" +
    "\013\000\002\007\012\000\002\007\011\000\002\007\011" +
    "\000\002\007\012\000\002\007\012\000\002\007\005\000" +
    "\002\011\005\000\002\011\002\000\002\012\010\000\002" +
    "\014\004\000\002\014\003\000\002\013\005\000\002\013" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\002" +
    "\000\002\016\013\000\002\016\012\000\002\017\004\000" +
    "\002\017\003\000\002\020\012\000\002\020\012\000\002" +
    "\020\011\000\002\020\011\000\002\022\004\000\002\022" +
    "\003\000\002\021\012\000\002\021\006\000\002\021\012" +
    "\000\002\021\012\000\002\021\005\000\002\027\004\000" +
    "\002\027\003\000\002\031\004\000\002\031\003\000\002" +
    "\023\007\000\002\023\003\000\002\023\005\000\002\023" +
    "\003\000\002\023\007\000\002\023\003\000\002\023\003" +
    "\000\002\030\007\000\002\030\003\000\002\030\005\000" +
    "\002\030\003\000\002\030\007\000\002\030\003\000\002" +
    "\036\006\000\002\036\006\000\002\036\006\000\002\036" +
    "\006\000\002\036\006\000\002\036\006\000\002\044\012" +
    "\000\002\044\012\000\002\044\012\000\002\044\012\000" +
    "\002\044\012\000\002\044\012\000\002\044\012\000\002" +
    "\046\011\000\002\046\012\000\002\045\010\000\002\045" +
    "\010\000\002\045\010\000\002\045\010\000\002\045\010" +
    "\000\002\045\010\000\002\043\003\000\002\037\003\000" +
    "\002\037\005\000\002\040\003\000\002\040\005\000\002" +
    "\040\007\000\002\042\003\000\002\042\005\000\002\041" +
    "\003\000\002\050\007\000\002\050\005\000\002\047\005" +
    "\000\002\047\003\000\002\025\005\000\002\025\003\000" +
    "\002\032\003\000\002\024\011\000\002\024\015\000\002" +
    "\026\011\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\004\000\002\034\005" +
    "\000\002\034\003\000\002\034\004\000\002\034\003\000" +
    "\002\035\005\000\002\035\005\000\002\035\004\000\002" +
    "\035\003\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\004\000\002\033\003\000\002" +
    "\033\003\000\002\033\004\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a4\000\004\032\004\001\002\000\004\006\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\031\010\001\002\000\004\032\011\001\002\000" +
    "\006\007\020\011\017\001\002\000\004\032\014\001\002" +
    "\000\004\032\ufffe\001\002\000\010\004\016\007\020\011" +
    "\017\001\002\000\004\032\uffff\001\002\000\004\006\u01a5" +
    "\001\002\000\006\012\041\031\ufff8\001\002\000\004\031" +
    "\021\001\002\000\004\032\022\001\002\000\006\004\030" +
    "\010\031\001\002\000\004\032\024\001\002\000\004\004" +
    "\025\001\002\000\004\007\026\001\002\000\004\031\027" +
    "\001\002\000\004\032\ufffd\001\002\000\004\007\037\001" +
    "\002\000\004\031\032\001\002\000\004\032\033\001\002" +
    "\000\004\004\034\001\002\000\004\010\035\001\002\000" +
    "\004\031\036\001\002\000\004\032\ufff7\001\002\000\004" +
    "\031\040\001\002\000\004\032\ufffc\001\002\000\004\005" +
    "\u01a3\001\002\000\004\031\043\001\002\000\006\032\044" +
    "\033\046\001\002\000\022\004\u01a0\013\u0117\015\u0116\016" +
    "\u0119\017\u0115\020\u0112\021\u0118\022\u0114\001\002\000\006" +
    "\032\u0110\033\046\001\002\000\014\113\051\114\061\116" +
    "\056\122\050\123\062\001\002\000\006\032\ufff5\033\ufff5" +
    "\001\002\000\004\121\u010c\001\002\000\026\026\100\034" +
    "\107\035\102\036\105\037\106\067\104\073\113\112\112" +
    "\122\101\123\114\001\002\000\016\063\u0108\113\051\114" +
    "\061\116\056\122\050\123\062\001\002\000\016\063\uffcd" +
    "\113\uffcd\114\uffcd\116\uffcd\122\uffcd\123\uffcd\001\002\000" +
    "\016\063\uffc9\113\uffc9\114\uffc9\116\uffc9\122\uffc9\123\uffc9" +
    "\001\002\000\016\063\uffcb\113\uffcb\114\uffcb\116\uffcb\122" +
    "\uffcb\123\uffcb\001\002\000\004\073\361\001\002\000\016" +
    "\063\uffc8\113\uffc8\114\uffc8\116\uffc8\122\uffc8\123\uffc8\001" +
    "\002\000\016\063\uffd1\113\uffd1\114\uffd1\116\uffd1\122\uffd1" +
    "\123\uffd1\001\002\000\004\073\324\001\002\000\004\121" +
    "\063\001\002\000\006\005\064\072\065\001\002\000\016" +
    "\047\245\050\243\052\251\053\246\054\244\120\247\001" +
    "\002\000\024\040\067\041\072\042\066\051\073\055\074" +
    "\057\075\061\076\062\070\117\071\001\002\000\004\073" +
    "\237\001\002\000\004\073\233\001\002\000\004\073\227" +
    "\001\002\000\004\073\224\001\002\000\004\073\220\001" +
    "\002\000\004\073\214\001\002\000\004\073\210\001\002" +
    "\000\004\073\200\001\002\000\004\073\077\001\002\000" +
    "\026\026\100\034\107\035\102\036\105\037\106\067\104" +
    "\073\113\112\112\122\101\123\114\001\002\000\044\064" +
    "\uff7c\065\uff7c\066\uff7c\067\uff7c\070\uff7c\071\uff7c\072\uff7c" +
    "\074\uff7c\075\uff7c\076\uff7c\077\uff7c\101\uff7c\102\uff7c\103" +
    "\uff7c\107\uff7c\110\uff7c\111\uff7c\001\002\000\004\121\177" +
    "\001\002\000\044\064\uff80\065\uff80\066\uff80\067\uff80\070" +
    "\uff80\071\uff80\072\uff80\074\uff80\075\uff80\076\uff80\077\uff80" +
    "\101\uff80\102\uff80\103\uff80\107\uff80\110\uff80\111\uff80\001" +
    "\002\000\010\074\175\110\143\111\144\001\002\000\024" +
    "\026\100\034\107\035\102\036\105\037\106\067\104\073" +
    "\113\122\101\123\114\001\002\000\044\064\uff7e\065\uff7e" +
    "\066\uff7e\067\uff7e\070\uff7e\071\uff7e\072\uff7e\074\uff7e\075" +
    "\uff7e\076\uff7e\077\uff7e\101\uff7e\102\uff7e\103\uff7e\107\uff7e" +
    "\110\uff7e\111\uff7e\001\002\000\044\064\uff7d\065\uff7d\066" +
    "\uff7d\067\uff7d\070\uff7d\071\uff7d\072\uff7d\074\uff7d\075\uff7d" +
    "\076\uff7d\077\uff7d\101\uff7d\102\uff7d\103\uff7d\107\uff7d\110" +
    "\uff7d\111\uff7d\001\002\000\044\064\uff81\065\uff81\066\uff81" +
    "\067\uff81\070\uff81\071\uff81\072\uff81\074\uff81\075\uff81\076" +
    "\uff81\077\uff81\101\uff81\102\uff81\103\uff81\107\uff81\110\uff81" +
    "\111\uff81\001\002\000\044\064\uff7b\065\uff7b\066\uff7b\067" +
    "\uff7b\070\uff7b\071\uff7b\072\uff7b\074\uff7b\075\uff7b\076\uff7b" +
    "\077\uff7b\101\uff7b\102\uff7b\103\uff7b\107\uff7b\110\uff7b\111" +
    "\uff7b\001\002\000\044\064\uff8d\065\uff8d\066\156\067\150" +
    "\070\154\071\155\072\uff8d\074\uff8d\075\151\076\157\077" +
    "\160\101\153\102\152\103\161\107\uff8d\110\uff8d\111\uff8d" +
    "\001\002\000\026\026\100\034\107\035\102\036\105\037" +
    "\106\067\104\073\113\112\112\122\101\123\114\001\002" +
    "\000\026\026\100\034\107\035\102\036\105\037\106\067" +
    "\104\073\113\112\112\122\101\123\114\001\002\000\004" +
    "\121\115\001\002\000\004\072\116\001\002\000\016\043" +
    "\122\044\120\045\121\046\124\056\123\060\117\001\002" +
    "\000\004\073\137\001\002\000\004\073\135\001\002\000" +
    "\004\073\133\001\002\000\004\073\131\001\002\000\004" +
    "\073\127\001\002\000\004\073\125\001\002\000\004\074" +
    "\126\001\002\000\044\064\uffaf\065\uffaf\066\uffaf\067\uffaf" +
    "\070\uffaf\071\uffaf\072\uffaf\074\uffaf\075\uffaf\076\uffaf\077" +
    "\uffaf\101\uffaf\102\uffaf\103\uffaf\107\uffaf\110\uffaf\111\uffaf" +
    "\001\002\000\004\074\130\001\002\000\044\064\uffae\065" +
    "\uffae\066\uffae\067\uffae\070\uffae\071\uffae\072\uffae\074\uffae" +
    "\075\uffae\076\uffae\077\uffae\101\uffae\102\uffae\103\uffae\107" +
    "\uffae\110\uffae\111\uffae\001\002\000\004\074\132\001\002" +
    "\000\044\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071" +
    "\uffb1\072\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\101\uffb1" +
    "\102\uffb1\103\uffb1\107\uffb1\110\uffb1\111\uffb1\001\002\000" +
    "\004\074\134\001\002\000\044\064\uffb0\065\uffb0\066\uffb0" +
    "\067\uffb0\070\uffb0\071\uffb0\072\uffb0\074\uffb0\075\uffb0\076" +
    "\uffb0\077\uffb0\101\uffb0\102\uffb0\103\uffb0\107\uffb0\110\uffb0" +
    "\111\uffb0\001\002\000\004\074\136\001\002\000\044\064" +
    "\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2" +
    "\074\uffb2\075\uffb2\076\uffb2\077\uffb2\101\uffb2\102\uffb2\103" +
    "\uffb2\107\uffb2\110\uffb2\111\uffb2\001\002\000\004\074\140" +
    "\001\002\000\044\064\uffad\065\uffad\066\uffad\067\uffad\070" +
    "\uffad\071\uffad\072\uffad\074\uffad\075\uffad\076\uffad\077\uffad" +
    "\101\uffad\102\uffad\103\uffad\107\uffad\110\uffad\111\uffad\001" +
    "\002\000\010\074\142\110\143\111\144\001\002\000\044" +
    "\064\uff7a\065\uff7a\066\uff7a\067\uff7a\070\uff7a\071\uff7a\072" +
    "\uff7a\074\uff7a\075\uff7a\076\uff7a\077\uff7a\101\uff7a\102\uff7a" +
    "\103\uff7a\107\uff7a\110\uff7a\111\uff7a\001\002\000\026\026" +
    "\100\034\107\035\102\036\105\037\106\067\104\073\113" +
    "\112\112\122\101\123\114\001\002\000\026\026\100\034" +
    "\107\035\102\036\105\037\106\067\104\073\113\112\112" +
    "\122\101\123\114\001\002\000\020\064\uff8f\065\uff8f\072" +
    "\uff8f\074\uff8f\107\uff8f\110\143\111\uff8f\001\002\000\020" +
    "\064\uff90\065\uff90\072\uff90\074\uff90\107\uff90\110\uff90\111" +
    "\uff90\001\002\000\020\064\uff8e\065\uff8e\072\uff8e\074\uff8e" +
    "\107\uff8e\110\uff8e\111\uff8e\001\002\000\024\026\100\034" +
    "\107\035\102\036\105\037\106\067\104\073\113\122\101" +
    "\123\114\001\002\000\024\026\100\034\107\035\102\036" +
    "\105\037\106\067\104\073\113\122\101\123\114\001\002" +
    "\000\024\026\100\034\107\035\102\036\105\037\106\067" +
    "\104\073\113\122\101\123\114\001\002\000\024\026\100" +
    "\034\107\035\102\036\105\037\106\067\104\073\113\122" +
    "\101\123\114\001\002\000\024\026\100\034\107\035\102" +
    "\036\105\037\106\067\104\073\113\122\101\123\114\001" +
    "\002\000\024\026\100\034\107\035\102\036\105\037\106" +
    "\067\104\073\113\122\101\123\114\001\002\000\024\026" +
    "\100\034\107\035\102\036\105\037\106\067\104\073\113" +
    "\122\101\123\114\001\002\000\024\026\100\034\107\035" +
    "\102\036\105\037\106\067\104\073\113\122\101\123\114" +
    "\001\002\000\024\026\100\034\107\035\102\036\105\037" +
    "\106\067\104\073\113\122\101\123\114\001\002\000\024" +
    "\026\100\034\107\035\102\036\105\037\106\067\104\073" +
    "\113\122\101\123\114\001\002\000\044\064\uff8c\065\uff8c" +
    "\066\156\067\150\070\154\071\155\072\uff8c\074\uff8c\075" +
    "\uff8c\076\uff8c\077\uff8c\101\uff8c\102\uff8c\103\uff8c\107\uff8c" +
    "\110\uff8c\111\uff8c\001\002\000\044\064\uff87\065\uff87\066" +
    "\156\067\150\070\154\071\155\072\uff87\074\uff87\075\uff87" +
    "\076\uff87\077\uff87\101\uff87\102\uff87\103\uff87\107\uff87\110" +
    "\uff87\111\uff87\001\002\000\044\064\uff8a\065\uff8a\066\156" +
    "\067\150\070\154\071\155\072\uff8a\074\uff8a\075\uff8a\076" +
    "\uff8a\077\uff8a\101\uff8a\102\uff8a\103\uff8a\107\uff8a\110\uff8a" +
    "\111\uff8a\001\002\000\044\064\uff86\065\uff86\066\uff86\067" +
    "\uff86\070\154\071\155\072\uff86\074\uff86\075\uff86\076\uff86" +
    "\077\uff86\101\uff86\102\uff86\103\uff86\107\uff86\110\uff86\111" +
    "\uff86\001\002\000\044\064\uff83\065\uff83\066\uff83\067\uff83" +
    "\070\uff83\071\uff83\072\uff83\074\uff83\075\uff83\076\uff83\077" +
    "\uff83\101\uff83\102\uff83\103\uff83\107\uff83\110\uff83\111\uff83" +
    "\001\002\000\044\064\uff84\065\uff84\066\uff84\067\uff84\070" +
    "\uff84\071\uff84\072\uff84\074\uff84\075\uff84\076\uff84\077\uff84" +
    "\101\uff84\102\uff84\103\uff84\107\uff84\110\uff84\111\uff84\001" +
    "\002\000\044\064\uff89\065\uff89\066\156\067\150\070\154" +
    "\071\155\072\uff89\074\uff89\075\uff89\076\uff89\077\uff89\101" +
    "\uff89\102\uff89\103\uff89\107\uff89\110\uff89\111\uff89\001\002" +
    "\000\044\064\uff8b\065\uff8b\066\156\067\150\070\154\071" +
    "\155\072\uff8b\074\uff8b\075\uff8b\076\uff8b\077\uff8b\101\uff8b" +
    "\102\uff8b\103\uff8b\107\uff8b\110\uff8b\111\uff8b\001\002\000" +
    "\044\064\uff88\065\uff88\066\156\067\150\070\154\071\155" +
    "\072\uff88\074\uff88\075\uff88\076\uff88\077\uff88\101\uff88\102" +
    "\uff88\103\uff88\107\uff88\110\uff88\111\uff88\001\002\000\044" +
    "\064\uff85\065\uff85\066\uff85\067\uff85\070\154\071\155\072" +
    "\uff85\074\uff85\075\uff85\076\uff85\077\uff85\101\uff85\102\uff85" +
    "\103\uff85\107\uff85\110\uff85\111\uff85\001\002\000\044\064" +
    "\uff82\065\uff82\066\uff82\067\uff82\070\uff82\071\uff82\072\uff82" +
    "\074\uff82\075\uff82\076\uff82\077\uff82\101\uff82\102\uff82\103" +
    "\uff82\107\uff82\110\uff82\111\uff82\001\002\000\004\064\176" +
    "\001\002\000\016\063\uffb8\113\uffb8\114\uffb8\116\uffb8\122" +
    "\uffb8\123\uffb8\001\002\000\044\064\uff7f\065\uff7f\066\uff7f" +
    "\067\uff7f\070\uff7f\071\uff7f\072\uff7f\074\uff7f\075\uff7f\076" +
    "\uff7f\077\uff7f\101\uff7f\102\uff7f\103\uff7f\107\uff7f\110\uff7f" +
    "\111\uff7f\001\002\000\026\026\100\034\107\035\102\036" +
    "\105\037\106\067\104\073\113\112\112\122\101\123\114" +
    "\001\002\000\020\064\uff9d\065\uff9d\072\uff9d\074\uff9d\107" +
    "\uff9d\110\143\111\144\001\002\000\006\072\205\074\204" +
    "\001\002\000\014\064\uff9e\065\uff9e\072\uff9e\074\uff9e\107" +
    "\uff9e\001\002\000\004\064\207\001\002\000\026\026\100" +
    "\034\107\035\102\036\105\037\106\067\104\073\113\112" +
    "\112\122\101\123\114\001\002\000\014\064\uff9f\065\uff9f" +
    "\072\uff9f\074\uff9f\107\uff9f\001\002\000\016\063\uffb5\113" +
    "\uffb5\114\uffb5\116\uffb5\122\uffb5\123\uffb5\001\002\000\026" +
    "\026\100\034\107\035\102\036\105\037\106\067\104\073" +
    "\113\112\112\122\101\123\114\001\002\000\006\072\205" +
    "\074\212\001\002\000\004\064\213\001\002\000\016\063" +
    "\uffb6\113\uffb6\114\uffb6\116\uffb6\122\uffb6\123\uffb6\001\002" +
    "\000\026\026\100\034\107\035\102\036\105\037\106\067" +
    "\104\073\113\112\112\122\101\123\114\001\002\000\006" +
    "\072\205\074\216\001\002\000\004\064\217\001\002\000" +
    "\020\063\uffb3\105\uffb3\113\uffb3\114\uffb3\116\uffb3\122\uffb3" +
    "\123\uffb3\001\002\000\026\026\100\034\107\035\102\036" +
    "\105\037\106\067\104\073\113\112\112\122\101\123\114" +
    "\001\002\000\010\074\222\110\143\111\144\001\002\000" +
    "\004\064\223\001\002\000\016\063\uffbb\113\uffbb\114\uffbb" +
    "\116\uffbb\122\uffbb\123\uffbb\001\002\000\004\074\225\001" +
    "\002\000\004\064\226\001\002\000\020\063\uffb4\105\uffb4" +
    "\113\uffb4\114\uffb4\116\uffb4\122\uffb4\123\uffb4\001\002\000" +
    "\026\026\100\034\107\035\102\036\105\037\106\067\104" +
    "\073\113\112\112\122\101\123\114\001\002\000\006\072" +
    "\205\074\231\001\002\000\004\064\232\001\002\000\016" +
    "\063\uffb7\113\uffb7\114\uffb7\116\uffb7\122\uffb7\123\uffb7\001" +
    "\002\000\026\026\100\034\107\035\102\036\105\037\106" +
    "\067\104\073\113\112\112\122\101\123\114\001\002\000" +
    "\006\072\205\074\235\001\002\000\004\064\236\001\002" +
    "\000\016\063\uffba\113\uffba\114\uffba\116\uffba\122\uffba\123" +
    "\uffba\001\002\000\026\026\100\034\107\035\102\036\105" +
    "\037\106\067\104\073\113\112\112\122\101\123\114\001" +
    "\002\000\010\074\241\110\143\111\144\001\002\000\004" +
    "\064\242\001\002\000\016\063\uffb9\113\uffb9\114\uffb9\116" +
    "\uffb9\122\uffb9\123\uffb9\001\002\000\004\073\306\001\002" +
    "\000\004\073\303\001\002\000\004\073\275\001\002\000" +
    "\004\073\272\001\002\000\004\073\264\001\002\000\004" +
    "\064\263\001\002\000\004\073\252\001\002\000\026\026" +
    "\100\034\107\035\102\036\105\037\106\067\104\073\113" +
    "\112\112\122\101\123\114\001\002\000\010\065\uffac\072" +
    "\205\074\uffac\001\002\000\004\074\262\001\002\000\006" +
    "\065\256\074\uffa9\001\002\000\026\026\100\034\107\035" +
    "\102\036\105\037\106\067\104\073\113\112\112\122\101" +
    "\123\114\001\002\000\012\065\260\074\uffa8\110\143\111" +
    "\144\001\002\000\026\026\100\034\107\035\102\036\105" +
    "\037\106\067\104\073\113\112\112\122\101\123\114\001" +
    "\002\000\010\074\uffa7\110\143\111\144\001\002\000\004" +
    "\064\uffbe\001\002\000\016\063\uffca\113\uffca\114\uffca\116" +
    "\uffca\122\uffca\123\uffca\001\002\000\026\026\100\034\107" +
    "\035\102\036\105\037\106\067\104\073\113\112\112\122" +
    "\101\123\114\001\002\000\004\074\271\001\002\000\006" +
    "\065\267\074\uffab\001\002\000\026\026\100\034\107\035" +
    "\102\036\105\037\106\067\104\073\113\112\112\122\101" +
    "\123\114\001\002\000\004\074\uffaa\001\002\000\004\064" +
    "\uffc1\001\002\000\026\026\100\034\107\035\102\036\105" +
    "\037\106\067\104\073\113\112\112\122\101\123\114\001" +
    "\002\000\004\074\274\001\002\000\004\064\uffc0\001\002" +
    "\000\026\026\100\034\107\035\102\036\105\037\106\067" +
    "\104\073\113\112\112\122\101\123\114\001\002\000\004" +
    "\074\302\001\002\000\006\065\300\074\uffa6\001\002\000" +
    "\026\026\100\034\107\035\102\036\105\037\106\067\104" +
    "\073\113\112\112\122\101\123\114\001\002\000\004\074" +
    "\uffa5\001\002\000\004\064\uffbc\001\002\000\026\026\100" +
    "\034\107\035\102\036\105\037\106\067\104\073\113\112" +
    "\112\122\101\123\114\001\002\000\004\074\305\001\002" +
    "\000\004\064\uffbf\001\002\000\004\106\311\001\002\000" +
    "\006\065\320\074\uffa4\001\002\000\004\074\317\001\002" +
    "\000\026\026\100\034\107\035\102\036\105\037\106\067" +
    "\104\073\113\112\112\122\101\123\114\001\002\000\010" +
    "\065\uffa0\072\205\107\uffa0\001\002\000\006\065\314\107" +
    "\315\001\002\000\026\026\100\034\107\035\102\036\105" +
    "\037\106\067\104\073\113\112\112\122\101\123\114\001" +
    "\002\000\006\065\uffa2\074\uffa2\001\002\000\010\065\uffa1" +
    "\072\205\107\uffa1\001\002\000\004\064\uffbd\001\002\000" +
    "\004\106\321\001\002\000\026\026\100\034\107\035\102" +
    "\036\105\037\106\067\104\073\113\112\112\122\101\123" +
    "\114\001\002\000\006\065\314\107\323\001\002\000\006" +
    "\065\uffa3\074\uffa3\001\002\000\026\026\100\034\107\035" +
    "\102\036\105\037\106\067\104\073\113\112\112\122\101" +
    "\123\114\001\002\000\010\074\326\110\143\111\144\001" +
    "\002\000\004\104\327\001\002\000\014\113\331\114\061" +
    "\116\056\122\330\123\337\001\002\000\004\121\355\001" +
    "\002\000\026\026\100\034\107\035\102\036\105\037\106" +
    "\067\104\073\113\112\112\122\101\123\114\001\002\000" +
    "\016\105\uffc6\113\uffc6\114\uffc6\116\uffc6\122\uffc6\123\uffc6" +
    "\001\002\000\016\105\uffc4\113\uffc4\114\uffc4\116\uffc4\122" +
    "\uffc4\123\uffc4\001\002\000\016\105\uffcf\113\uffcf\114\uffcf" +
    "\116\uffcf\122\uffcf\123\uffcf\001\002\000\016\105\uffc2\113" +
    "\uffc2\114\uffc2\116\uffc2\122\uffc2\123\uffc2\001\002\000\016" +
    "\105\346\113\331\114\061\116\056\122\330\123\337\001" +
    "\002\000\004\121\340\001\002\000\006\005\341\072\342" +
    "\001\002\000\016\047\245\050\243\052\251\053\246\054" +
    "\244\120\247\001\002\000\006\051\073\117\071\001\002" +
    "\000\004\064\344\001\002\000\016\105\uffc3\113\uffc3\114" +
    "\uffc3\116\uffc3\122\uffc3\123\uffc3\001\002\000\016\105\uffd0" +
    "\113\uffd0\114\uffd0\116\uffd0\122\uffd0\123\uffd0\001\002\000" +
    "\022\063\uff9c\105\uff9c\113\uff9c\114\uff9c\115\347\116\uff9c" +
    "\122\uff9c\123\uff9c\001\002\000\004\104\350\001\002\000" +
    "\014\113\331\114\061\116\056\122\330\123\337\001\002" +
    "\000\016\105\352\113\331\114\061\116\056\122\330\123" +
    "\337\001\002\000\020\063\uff9b\105\uff9b\113\uff9b\114\uff9b" +
    "\116\uff9b\122\uff9b\123\uff9b\001\002\000\006\064\354\072" +
    "\205\001\002\000\016\105\uffc5\113\uffc5\114\uffc5\116\uffc5" +
    "\122\uffc5\123\uffc5\001\002\000\004\005\356\001\002\000" +
    "\026\026\100\034\107\035\102\036\105\037\106\067\104" +
    "\073\113\112\112\122\101\123\114\001\002\000\006\064" +
    "\360\072\205\001\002\000\016\105\uffc7\113\uffc7\114\uffc7" +
    "\116\uffc7\122\uffc7\123\uffc7\001\002\000\014\034\367\067" +
    "\365\073\366\122\362\123\114\001\002\000\004\121\u0107" +
    "\001\002\000\014\066\372\067\374\070\375\071\373\074" +
    "\u0103\001\002\000\014\066\uff91\067\uff91\070\uff91\071\uff91" +
    "\074\uff91\001\002\000\014\034\367\067\365\073\366\122" +
    "\362\123\114\001\002\000\014\034\367\067\365\073\366" +
    "\122\362\123\114\001\002\000\014\066\uff93\067\uff93\070" +
    "\uff93\071\uff93\074\uff93\001\002\000\014\066\372\067\374" +
    "\070\375\071\373\074\371\001\002\000\014\066\uff94\067" +
    "\uff94\070\uff94\071\uff94\074\uff94\001\002\000\014\034\367" +
    "\067\365\073\366\122\362\123\114\001\002\000\014\034" +
    "\367\067\365\073\366\122\362\123\114\001\002\000\014" +
    "\034\367\067\365\073\366\122\362\123\114\001\002\000" +
    "\014\034\367\067\365\073\366\122\362\123\114\001\002" +
    "\000\014\066\uff97\067\uff97\070\uff97\071\uff97\074\uff97\001" +
    "\002\000\014\066\uff98\067\uff98\070\375\071\373\074\uff98" +
    "\001\002\000\014\066\uff96\067\uff96\070\uff96\071\uff96\074" +
    "\uff96\001\002\000\014\066\uff99\067\uff99\070\375\071\373" +
    "\074\uff99\001\002\000\014\066\uff95\067\uff95\070\uff95\071" +
    "\uff95\074\uff95\001\002\000\004\104\u0104\001\002\000\014" +
    "\113\331\114\061\116\056\122\330\123\337\001\002\000" +
    "\016\105\u0106\113\331\114\061\116\056\122\330\123\337" +
    "\001\002\000\020\063\uff9a\105\uff9a\113\uff9a\114\uff9a\116" +
    "\uff9a\122\uff9a\123\uff9a\001\002\000\014\066\uff92\067\uff92" +
    "\070\uff92\071\uff92\074\uff92\001\002\000\006\032\uffec\033" +
    "\uffec\001\002\000\016\063\uffd2\113\uffd2\114\uffd2\116\uffd2" +
    "\122\uffd2\123\uffd2\001\002\000\006\064\u010b\072\205\001" +
    "\002\000\016\063\uffcc\113\uffcc\114\uffcc\116\uffcc\122\uffcc" +
    "\123\uffcc\001\002\000\004\005\u010d\001\002\000\026\026" +
    "\100\034\107\035\102\036\105\037\106\067\104\073\113" +
    "\112\112\122\101\123\114\001\002\000\006\064\u010f\072" +
    "\205\001\002\000\016\063\uffce\113\uffce\114\uffce\116\uffce" +
    "\122\uffce\123\uffce\001\002\000\022\004\u0113\013\u0117\015" +
    "\u0116\016\u0119\017\u0115\020\u0112\021\u0118\022\u0114\001\002" +
    "\000\006\032\ufff6\033\ufff6\001\002\000\004\031\u019b\001" +
    "\002\000\006\011\u0199\014\u0195\001\002\000\004\031\u018f" +
    "\001\002\000\004\031\u018a\001\002\000\006\027\u013b\031" +
    "\uffe2\001\002\000\006\027\u0132\031\uffea\001\002\000\004" +
    "\027\u0126\001\002\000\004\027\u011a\001\002\000\004\005" +
    "\u0123\001\002\000\006\027\uffe7\031\uffe7\001\002\000\006" +
    "\027\u011a\031\u011e\001\002\000\006\027\uffe8\031\uffe8\001" +
    "\002\000\004\032\u011f\001\002\000\004\004\u0120\001\002" +
    "\000\004\016\u0121\001\002\000\004\031\u0122\001\002\000" +
    "\006\032\ufff1\033\ufff1\001\002\000\006\026\u0125\030\u0124" +
    "\001\002\000\006\027\uffe5\031\uffe5\001\002\000\006\027" +
    "\uffe6\031\uffe6\001\002\000\004\005\u012d\001\002\000\004" +
    "\031\u0128\001\002\000\004\032\u0129\001\002\000\004\004" +
    "\u012a\001\002\000\004\021\u012b\001\002\000\004\031\u012c" +
    "\001\002\000\006\032\uffee\033\uffee\001\002\000\004\026" +
    "\u012e\001\002\000\004\027\u012f\001\002\000\004\005\u0130" +
    "\001\002\000\004\026\u0131\001\002\000\004\031\uffe9\001" +
    "\002\000\004\005\u0139\001\002\000\004\031\u0134\001\002" +
    "\000\004\032\u0135\001\002\000\004\004\u0136\001\002\000" +
    "\004\013\u0137\001\002\000\004\031\u0138\001\002\000\006" +
    "\032\ufff4\033\ufff4\001\002\000\004\026\u013a\001\002\000" +
    "\004\031\uffeb\001\002\000\004\005\u0187\001\002\000\004" +
    "\031\u013d\001\002\000\004\032\u013e\001\002\000\004\023" +
    "\u0180\001\002\000\004\032\u0140\001\002\000\006\004\u0141" +
    "\023\u0142\001\002\000\004\015\u017e\001\002\000\004\031" +
    "\u0143\001\002\000\004\032\u0144\001\002\000\006\024\u0149" +
    "\025\u014a\001\002\000\004\032\u0147\001\002\000\004\032" +
    "\uffde\001\002\000\010\004\u014b\024\u0149\025\u014a\001\002" +
    "\000\004\032\uffdf\001\002\000\004\031\u0174\001\002\000" +
    "\004\031\u014e\001\002\000\004\023\u014c\001\002\000\004" +
    "\031\u014d\001\002\000\004\032\uffe1\001\002\000\006\032" +
    "\u014f\033\u0152\001\002\000\012\004\u0171\013\u0158\016\u015a" +
    "\021\u0159\001\002\000\006\032\uffd8\033\uffd8\001\002\000" +
    "\006\032\u0155\033\u0152\001\002\000\014\113\051\114\061" +
    "\116\056\122\050\123\062\001\002\000\016\063\u0154\113" +
    "\051\114\061\116\056\122\050\123\062\001\002\000\006" +
    "\032\uffd3\033\uffd3\001\002\000\012\004\u0157\013\u0158\016" +
    "\u015a\021\u0159\001\002\000\006\032\uffd9\033\uffd9\001\002" +
    "\000\006\014\u016e\025\u016d\001\002\000\006\027\u0132\031" +
    "\uffea\001\002\000\004\027\u0126\001\002\000\004\027\u011a" +
    "\001\002\000\006\027\u011a\031\u015c\001\002\000\004\032" +
    "\u015d\001\002\000\004\004\u015e\001\002\000\004\016\u015f" +
    "\001\002\000\004\031\u0160\001\002\000\006\032\uffd5\033" +
    "\uffd5\001\002\000\004\031\u0162\001\002\000\004\032\u0163" +
    "\001\002\000\004\004\u0164\001\002\000\004\021\u0165\001" +
    "\002\000\004\031\u0166\001\002\000\006\032\uffd4\033\uffd4" +
    "\001\002\000\004\031\u0168\001\002\000\004\032\u0169\001" +
    "\002\000\004\004\u016a\001\002\000\004\013\u016b\001\002" +
    "\000\004\031\u016c\001\002\000\006\032\uffd7\033\uffd7\001" +
    "\002\000\004\031\u0170\001\002\000\004\031\u016f\001\002" +
    "\000\006\032\uffd6\033\uffd6\001\002\000\004\032\uffdc\001" +
    "\002\000\006\014\u016e\025\u0172\001\002\000\004\031\u0173" +
    "\001\002\000\004\032\uffdb\001\002\000\006\032\u0175\033" +
    "\u0152\001\002\000\012\004\u017b\013\u0158\016\u015a\021\u0159" +
    "\001\002\000\006\032\u0177\033\u0152\001\002\000\012\004" +
    "\u0178\013\u0158\016\u015a\021\u0159\001\002\000\006\014\u016e" +
    "\024\u0179\001\002\000\004\031\u017a\001\002\000\004\032" +
    "\uffdd\001\002\000\006\014\u016e\024\u017c\001\002\000\004" +
    "\031\u017d\001\002\000\004\032\uffda\001\002\000\004\031" +
    "\u017f\001\002\000\006\032\ufff2\033\ufff2\001\002\000\004" +
    "\031\u0181\001\002\000\004\032\u0144\001\002\000\004\032" +
    "\u0183\001\002\000\010\004\u0184\024\u0149\025\u014a\001\002" +
    "\000\004\023\u0185\001\002\000\004\031\u0186\001\002\000" +
    "\004\032\uffe0\001\002\000\006\026\u0189\027\u0188\001\002" +
    "\000\004\031\uffe4\001\002\000\004\031\uffe3\001\002\000" +
    "\004\032\u018b\001\002\000\004\004\u018c\001\002\000\004" +
    "\017\u018d\001\002\000\004\031\u018e\001\002\000\006\032" +
    "\ufff0\033\ufff0\001\002\000\006\032\u0190\033\046\001\002" +
    "\000\022\004\u0198\013\u0117\015\u0116\016\u0119\017\u0115\020" +
    "\u0112\021\u0118\022\u0114\001\002\000\006\032\u0192\033\046" +
    "\001\002\000\022\004\u0193\013\u0117\015\u0116\016\u0119\017" +
    "\u0115\020\u0112\021\u0118\022\u0114\001\002\000\006\014\u0195" +
    "\022\u0194\001\002\000\004\031\u0197\001\002\000\004\031" +
    "\u0196\001\002\000\006\032\ufff3\033\ufff3\001\002\000\006" +
    "\032\uffed\033\uffed\001\002\000\004\014\u0195\001\002\000" +
    "\004\031\u019a\001\002\000\004\032\ufffb\001\002\000\004" +
    "\032\u019c\001\002\000\004\004\u019d\001\002\000\004\020" +
    "\u019e\001\002\000\004\031\u019f\001\002\000\006\032\uffef" +
    "\033\uffef\001\002\000\006\011\u01a1\014\u0195\001\002\000" +
    "\004\031\u01a2\001\002\000\004\032\ufffa\001\002\000\004" +
    "\026\u01a4\001\002\000\004\031\ufff9\001\002\000\004\031" +
    "\u01a6\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a4\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\011\004\012\001\001\000\002\001\001\000\004\004" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\041\001\001\000" +
    "\002\001\001\000\004\005\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\044\007\046\001\001\000\002\001\001\000\004" +
    "\007\u0110\001\001\000\016\023\057\024\052\026\054\027" +
    "\051\044\053\046\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\025\u0109\032\202\033\110\035\200\045" +
    "\107\001\001\000\014\023\u0108\024\052\026\054\044\053" +
    "\046\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\247\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\033\110\035" +
    "\102\045\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\173\045" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\033" +
    "\110\035\146\045\107\001\001\000\010\033\110\035\140" +
    "\045\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\033\110\035\145\045\107" +
    "\001\001\000\010\033\110\035\144\045\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\172\045\107\001\001\000\006\033\171\045\107\001" +
    "\001\000\006\033\170\045\107\001\001\000\006\033\167" +
    "\045\107\001\001\000\006\033\166\045\107\001\001\000" +
    "\006\033\165\045\107\001\001\000\006\033\164\045\107" +
    "\001\001\000\006\033\163\045\107\001\001\000\006\033" +
    "\162\045\107\001\001\000\006\033\161\045\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\025\201\032\202\033\110\035" +
    "\200\045\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\032\205\033" +
    "\110\035\200\045\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\025\210\032\202\033\110\035\200\045" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\025\214\032\202\033\110\035\200\045" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\033\110\035\220\045\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\025" +
    "\227\032\202\033\110\035\200\045\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\025" +
    "\233\032\202\033\110\035\200\045\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\033" +
    "\110\035\237\045\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\025\252\032" +
    "\202\033\110\035\200\040\253\043\254\045\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\033\110\035\256\045\107\001\001\000\002\001\001" +
    "\000\010\033\110\035\260\045\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\025\252" +
    "\032\202\033\110\035\200\037\264\043\265\045\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\025\252" +
    "\032\202\033\110\035\200\043\267\045\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\025\252\032\202" +
    "\033\110\035\200\043\272\045\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\025\252\032\202\033\110" +
    "\035\200\042\275\043\276\045\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\025\252\032\202\033\110" +
    "\035\200\043\300\045\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\025\252\032\202\033\110\035\200" +
    "\043\303\045\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\307\050\306\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\025\311\032\202\033\110\035" +
    "\200\045\107\047\312\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\025\315\032\202\033\110\035\200\045" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\025\311\032\202\033" +
    "\110\035\200\045\107\047\321\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\033\110\035\324\045\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\024\331" +
    "\026\332\030\333\031\335\046\334\001\001\000\002\001" +
    "\001\000\014\025\352\032\202\033\110\035\200\045\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\331\026\332\030\344" +
    "\046\334\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\342\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\024\331\026\332\030\333\031\350" +
    "\046\334\001\001\000\012\024\331\026\332\030\344\046" +
    "\334\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\025\356\032\202\033" +
    "\110\035\200\045\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\362\045\363\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\034\u0101" +
    "\045\363\001\001\000\006\034\367\045\363\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\u0100\045\363\001\001\000\006\034\377\045\363\001" +
    "\001\000\006\034\376\045\363\001\001\000\006\034\375" +
    "\045\363\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\024\331\026\332\030\333\031\u0104\046" +
    "\334\001\001\000\012\024\331\026\332\030\344\046\334" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\025\u010d\032\202\033\110\035" +
    "\200\045\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u013b\001\001\000\004\011\u0132\001\001\000\004\012" +
    "\u0126\001\001\000\006\013\u011a\014\u011b\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\u011c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\u013e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\u0144\020\u0145\001\001\000\002\001\001\000\004\020\u0147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\u014f\022" +
    "\u0150\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\u0155\001\001\000\016\023\057\024\052\026\054\027" +
    "\u0152\044\053\046\056\001\001\000\014\023\u0108\024\052" +
    "\026\054\044\053\046\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\u0166\001\001\000\004\012\u0160\001\001\000\006\013" +
    "\u011a\014\u015a\001\001\000\004\013\u011c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\u014f\022\u0175\001\001\000\002" +
    "\001\001\000\004\021\u0155\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\u0181" +
    "\020\u0145\001\001\000\004\020\u0147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\u0190\007\046\001" +
    "\001\000\002\001\001\000\004\007\u0110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    javax.swing.JTextArea txt_console;
    public Pojos.err err;
    public parser(java_cup.runtime.Scanner s,javax.swing.JTextArea txt_console) {super(s); this.txt_console = txt_console;}

    /*Variable global que guarda el html*/
    public StringBuilder bf = new StringBuilder();

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/
    public void syntax_error(Symbol s){
        err = new Pojos.err(s.left,s.right,"sintactico",(String)s.value);
        txt_console.append("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".\n");
    }
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            txt_console.append("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.\n");
    }

    /*validar fondo*/
    public String validaFondo(String color){
        switch (color.toLowerCase()){
            case "rojo":
                return "red";
            case "azul":
                return "blue";
            case "verde":
                return "green";
            case "gris":
                return "gray";
            case "negro":
                return "black";
            case "amarillo":
                return "yellow";
            case "rosado":
                return "pink";
            default:
                if(color.length()==7 && color.charAt(0)=='#'){
                    try {
                        Integer.parseInt(color.substring(1, 6), 16);
                        return color;
                    }
                    catch (NumberFormatException e) {
                        return "#00000";
                    }
                }
            return "#00000";
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= TEXTO R_COMPI CIERRA_ETIQUETA inner TEXTO SLASH R_COMPI CIERRA_ETIQUETA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
    bf.append("<html>\n");
    bf.append(a);
    bf.append("\n</html>");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inner ::= inner t_inner 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a + b;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inner",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inner ::= t_inner 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inner",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // t_inner ::= TEXTO R_CABECERA CIERRA_ETIQUETA inner_cabecera TEXTO SLASH R_CABECERA CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "head>\n" + b + c + "/head>\n";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_inner",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // t_inner ::= TEXTO R_CABECERA CIERRA_ETIQUETA TEXTO SLASH R_CABECERA CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "head>\n" + b + "/head>\n";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_inner",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // t_inner ::= TEXTO R_CUERPO op_cuerpo CIERRA_ETIQUETA inner_cuerpo TEXTO SLASH R_CUERPO CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        if(b==null){
            RESULT = a + "body>\n" + c + d + "/body>\n";
        }
        else{
            RESULT = a + "body " + b + ">\n" + c + d + "/body>\n";
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_inner",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // t_inner ::= TEXTO R_CUERPO op_cuerpo CIERRA_ETIQUETA TEXTO SLASH R_CUERPO CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        if(b==null){
            RESULT = a + "body>\n" + c + "/body>\n";
        }
        else{
            RESULT = a + "body" + b + ">\n" + c + "/body>\n";
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_inner",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // op_cuerpo ::= R_FONDO IGUAL CADENA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = "bgcolor=" + validaFondo(a.toString().replaceAll("\"", ""));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_cuerpo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // op_cuerpo ::= 
            {
              String RESULT =null;
		/*epsilon*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_cuerpo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inner_cabecera ::= TEXTO R_TITULO CIERRA_ETIQUETA TEXTO SLASH R_TITULO CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "title>\n" + b + "/title>\n";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inner_cabecera",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inner_cuerpo ::= inner_cuerpo tipo_cuerpo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a + b;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inner_cuerpo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inner_cuerpo ::= tipo_cuerpo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inner_cuerpo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo_cuerpo ::= TEXTO R_PARRAFO op_parrafo CIERRA_ETIQUETA TEXTO SLASH R_PARRAFO CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        if(b==null){
            RESULT = a + "p>\n" + c + "/p>\n";
        }
        else{
            RESULT = a + "p " + b + ">\n" + c + "/p>\n";
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_cuerpo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_cuerpo ::= TEXTO SLASH R_SALTO CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "br>";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_cuerpo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_cuerpo ::= TEXTO R_TABLA op_tabla CIERRA_ETIQUETA lista_tabla TEXTO SLASH R_TABLA CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "table " + b + ">\n" + c + d + "/table>\n";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_cuerpo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo_cuerpo ::= TEXTO R_IMAGEN list_img CIERRA_ETIQUETA TEXTO SLASH R_IMAGEN CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "img " + b + ">\n" + c + "/img>\n";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_cuerpo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo_cuerpo ::= TEXTO R_TEXTOA CIERRA_ETIQUETA TEXTO SLASH R_TEXTOA CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "h1>\n" + b + "/h1>\n";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_cuerpo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_cuerpo ::= TEXTO R_TEXTOB CIERRA_ETIQUETA TEXTO SLASH R_TEXTOB CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "h3>\n" + b + "/h3>\n";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_cuerpo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_cuerpo ::= TEXTO R_BOTON op_boton CIERRA_ETIQUETA TEXTO SLASH R_BOTON CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "input type=\"button\" " + b + ">\n" + c.toString().replace("<"," ");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_cuerpo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo_cuerpo ::= TEXTO R_ESPACIO CIERRA_ETIQUETA inner_cuerpo TEXTO SLASH R_ESPACIO CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "div>\n" + b + c + "/div>\n";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_cuerpo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo_cuerpo ::= ABRE_HS list_hs R_CIERRAHS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      if(a!=null)
        RESULT = a.toString();
      else
        RESULT = "";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_cuerpo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // op_parrafo ::= ID IGUAL CADENA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(a.toString().equalsIgnoreCase("alineacion")){
            String align = "";
            b = ((String)b).replaceAll("\"","");
            if(b.toString().equalsIgnoreCase("centrado")){
                align = "center";
            }
            else if(b.toString().equalsIgnoreCase("justificado")){
                align = "justify";
            }
            else if(b.toString().equalsIgnoreCase("derecha")){
                align = "right";
            }
            else if(b.toString().equalsIgnoreCase("izquierda")){
                align = "left";
            }
            RESULT = "align=\"" + align+"\"";
        }
        else{
            RESULT = "";
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_parrafo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // op_parrafo ::= 
            {
              String RESULT =null;
		 /*epsilon*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_parrafo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // op_boton ::= ID IGUAL CADENA ID IGUAL CADENA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String id="";
        String value="";
        if(a.toString().equalsIgnoreCase("id")){
            id = b.toString();
        }
        else if(a.toString().equalsIgnoreCase("texto")){
            value = d.toString();
        }
        if(c.toString().equalsIgnoreCase("id")){
            id = d.toString();
        }
        else if(c.toString().equalsIgnoreCase("texto")){
            value = d.toString();
        }
        RESULT = "id =" +  id + " value =" + value;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_boton",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // list_img ::= list_img op_imagen 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a + " " + b;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_img",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // list_img ::= op_imagen 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_img",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // op_imagen ::= ID IGUAL CADENA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(a.toString().equalsIgnoreCase("path")){
            RESULT = " src=" + b;
        }
        else if(a.toString().equalsIgnoreCase("alto")){
            RESULT = " height=" + b;
        }
        else if(a.toString().equalsIgnoreCase("ancho")){
            RESULT = " width=" + b;
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_imagen",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // op_imagen ::= ID IGUAL NUM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(a.toString().equalsIgnoreCase("path")){
            RESULT = " src=" + b;
        }
        else if(a.toString().equalsIgnoreCase("alto")){
            RESULT = " height=" + b;
        }
        else if(a.toString().equalsIgnoreCase("ancho")){
            RESULT = " width=" + b;
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_imagen",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // op_tabla ::= ID IGUAL ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(a.toString().equalsIgnoreCase("borde")){
            RESULT = "border" + "=" + b;
        }
        else RESULT = "";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_tabla",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // op_tabla ::= ID IGUAL CADENA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(a.toString().equalsIgnoreCase("borde")){
            RESULT = "border" + "=" + b;
        }
        else RESULT = "";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_tabla",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // op_tabla ::= 
            {
              String RESULT =null;
		/*epsilon*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_tabla",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_tabla ::= lista_tabla TEXTO R_FILA CIERRA_ETIQUETA lista_fila TEXTO SLASH R_FILA CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + b + "tr>" + c + d + "/tr>\n";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_tabla",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista_tabla ::= TEXTO R_FILA CIERRA_ETIQUETA lista_fila TEXTO SLASH R_FILA CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "tr>"+ b + c + "/tr>\n";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_tabla",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_fila ::= lista_fila tipo_columna 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a + b;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_fila",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_fila ::= tipo_columna 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_fila",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipo_columna ::= TEXTO R_COLUMNAC CIERRA_ETIQUETA lista_columna TEXTO SLASH R_COLUMNAC CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "th>" + b + c + "/th>\n";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_columna",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipo_columna ::= TEXTO R_COLUMNA CIERRA_ETIQUETA lista_columna TEXTO SLASH R_COLUMNA CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "th>" + b + c + "/th>\n";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_columna",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipo_columna ::= TEXTO R_COLUMNA CIERRA_ETIQUETA TEXTO SLASH R_COLUMNA CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "th>" + c + "/th>\n";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_columna",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipo_columna ::= TEXTO R_COLUMNAC CIERRA_ETIQUETA TEXTO SLASH R_COLUMNAC CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "th>" + c + "/th>\n";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_columna",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lista_columna ::= lista_columna op_columna 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a + "\n" + b;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_columna",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lista_columna ::= op_columna 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a + "\n";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_columna",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // op_columna ::= TEXTO R_PARRAFO op_parrafo CIERRA_ETIQUETA TEXTO SLASH R_PARRAFO CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        if(b==null){
            RESULT = a + "p>" + c + "/p>";
        }
        else{
            RESULT = a + "p " + b + ">" + c + "/p>";
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_columna",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // op_columna ::= TEXTO SLASH R_SALTO CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "br>";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_columna",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // op_columna ::= TEXTO R_IMAGEN list_img CIERRA_ETIQUETA TEXTO SLASH R_IMAGEN CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "image " + b + ">" + c + "/image>";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_columna",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // op_columna ::= TEXTO R_BOTON op_boton CIERRA_ETIQUETA TEXTO SLASH R_BOTON CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "input type=\"button\" " + b + ">" + c.toString().replace("<"," ");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_columna",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // op_columna ::= ABRE_HS list_hs R_CIERRAHS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = (String)a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_columna",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // list_hs ::= list_hs op_hs 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
        if(b!=null){
            if(b instanceof St_If){
                if(((St_If)b).isCondicion())
                      RESULT = RESULT + ((St_If)b).ejecutar(txt_console);
            }
            else if(b instanceof St_While){
                StringBuilder temp = new StringBuilder();
                for(int i=0; i<((St_While)b).getRep();i++){
                    temp.append(((St_While)b).ejecutar(txt_console));
                }
                RESULT = RESULT + temp.toString();
            }
            else if(b instanceof St_IfElse){
                if(((St_IfElse)b).isCond())
                      RESULT = RESULT + ((St_IfElse)b).ejecutar(txt_console);
                else
                      RESULT = RESULT + ((St_IfElse)b).ejecutar1(txt_console);
            }
            else{
                  RESULT = RESULT + b.toString();
            }
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_hs",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // list_hs ::= op_hs 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = "";
        if(a!=null){
            if(a instanceof St_If){
                if(((St_If)a).isCondicion())
                    RESULT = ((St_If)a).ejecutar(txt_console);
            }
            else if(a instanceof St_While){
                StringBuilder temp = new StringBuilder();
                for(int i=0; i<((St_While)a).getRep();i++){
                    temp.append(((St_While)a).ejecutar(txt_console));
                }
                RESULT = temp.toString();
            }
            else if(a instanceof St_IfElse){
                if(((St_IfElse)a).isCond())
                      RESULT = ((St_IfElse)a).ejecutar(txt_console);
                else
                    RESULT = ((St_IfElse)a).ejecutar1(txt_console);
            }
            else{
                RESULT = a.toString();
            }
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_hs",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // list_hsp ::= list_hsp op_hsp 
            {
              ArrayList<statement.St> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<statement.St> a = (ArrayList<statement.St>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		statement.St b = (statement.St)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
        RESULT.add(b);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_hsp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // list_hsp ::= op_hsp 
            {
              ArrayList<statement.St> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		statement.St a = (statement.St)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ArrayList<statement.St>();
        RESULT.add(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_hsp",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // op_hs ::= VAR1 VARIABLE IGUAL block_echo PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        if(b instanceof Boolean){
            lista_variable.put("$"+a.toString().toLowerCase(),new Pojos.Variable("$"+a.toString(),"Booleano",aleft,aright,b));
        }
        else if(b instanceof String){
            lista_variable.put("$"+a.toString().toLowerCase(),new Pojos.Variable("$"+a.toString(),"Cadena",aleft,aright,b));
        }
        else if(b instanceof Integer){
            lista_variable.put("$"+a.toString().toLowerCase(),new Pojos.Variable("$"+a.toString(),"Entero",aleft,aright,b));
        }
        else if(b instanceof Float){
            lista_variable.put("$"+a.toString().toLowerCase(),new Pojos.Variable("$"+a.toString(),"Decimal",aleft,aright,b));
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_hs",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // op_hs ::= block_if 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_hs",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // op_hs ::= R_ECHO block_echo PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        txt_console.append("-> " + a.toString()+"\n");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_hs",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // op_hs ::= block_repetir 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = b;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_hs",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // op_hs ::= VAR2 VARIABLE IGUAL var_obj PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        lista_variable.put("#"+a.toString().toLowerCase(),new Pojos.Variable("#"+a.toString().toLowerCase(),"Object",aleft,aright,b));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_hs",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // op_hs ::= st_set 
            {
              Object RESULT =null;
		

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_hs",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // op_hs ::= st_insert 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          RESULT = a.toString();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_hs",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // op_hsp ::= VAR1 VARIABLE IGUAL block_echo PUNTOYCOMA 
            {
              statement.St RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        if(b instanceof Boolean){
            RESULT = new statement.Var(new Pojos.Variable("$"+a.toString().toLowerCase(),"Booleano",aleft,aright,b));
        }
        else if(b instanceof String){
            RESULT = new statement.Var(new Pojos.Variable("$"+a.toString().toLowerCase(),"Cadena",aleft,aright,b));
        }
        else if(b instanceof Integer){
            RESULT = new statement.Var(new Pojos.Variable("$"+a.toString().toLowerCase(),"Entero",aleft,aright,b));
        }
        else if(b instanceof Float){
            RESULT = new statement.Var(new Pojos.Variable("$"+a.toString().toLowerCase(),"Decimal",aleft,aright,b));
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_hsp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // op_hsp ::= block_if 
            {
              statement.St RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(a instanceof statement.St_If){
            RESULT = (statement.St_If) a;
        }
        else if(a instanceof statement.St_IfElse){
            RESULT = (statement.St_IfElse) a;
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_hsp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // op_hsp ::= R_ECHO block_echo PUNTOYCOMA 
            {
              statement.St RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new statement.Echo(a.toString());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_hsp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // op_hsp ::= block_repetir 
            {
              statement.St RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = (statement.St_While) a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_hsp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // op_hsp ::= VAR2 VARIABLE IGUAL var_obj PUNTOYCOMA 
            {
              statement.St RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new statement.Var(new Pojos.Variable("#"+a.toString().toLowerCase(),"Object",aleft,aright,b));

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_hsp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // op_hsp ::= st_insert 
            {
              statement.St RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new statement.Insert(a.toString());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_hsp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // var_obj ::= R_CREARPARRAFO ABRE lst_parrafo CIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_obj",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // var_obj ::= R_CREARTEXTOA ABRE cad_var CIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Pojos.TextoA(a.toString());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_obj",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // var_obj ::= R_CREARTEXTOB ABRE cad_var CIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new Pojos.TextoB(a.toString());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_obj",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // var_obj ::= R_CREARIMAGEN ABRE lst_img CIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_obj",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // var_obj ::= R_CREARTABLA ABRE lst_table CIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_obj",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // var_obj ::= R_CREARBOTON ABRE lst_boton CIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_obj",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // st_set ::= VAR2 VARIABLE CONCATENACION R_SETALTO ABRE expr_logica CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Object o = lista_variable.get("#"+a.toString().toLowerCase()).getValue();
        if(o instanceof Image){
            ((Image)o).setAlto(Integer.parseInt(b.toString()));
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_set",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // st_set ::= VAR2 VARIABLE CONCATENACION R_SETPATH ABRE block_echo CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Object o = lista_variable.get("#"+a.toString().toLowerCase()).getValue();
        if(o instanceof Image){
            ((Image)o).setPath(b.toString());
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_set",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // st_set ::= VAR2 VARIABLE CONCATENACION R_SETANCHO ABRE expr_logica CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Object o = lista_variable.get("#"+a.toString().toLowerCase()).getValue();
        if(o instanceof Image){
            if(b instanceof Float){
                float b1 = Float.parseFloat(b.toString());
                ((Image)o).setAncho((int)b1);
            }
            else{
                ((Image)o).setAncho(Integer.parseInt(b.toString()));
            }
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_set",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // st_set ::= VAR2 VARIABLE CONCATENACION R_SETBORDE ABRE expr_logica CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Object o = lista_variable.get("#"+a.toString().toLowerCase()).getValue();
        if(o instanceof Tabla){
          ((Tabla)o).setBorde((boolean)b);
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_set",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // st_set ::= VAR2 VARIABLE CONCATENACION R_SETTEXTO ABRE block_echo CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Object o = lista_variable.get("#"+a.toString().toLowerCase()).getValue();
        if(o instanceof Boton){
            ((Boton)o).setTexto(b.toString());
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_set",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // st_set ::= VAR2 VARIABLE CONCATENACION R_SETCONTENIDO ABRE block_echo CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Object o = lista_variable.get("#"+a.toString().toLowerCase()).getValue();
        if(o instanceof Parrafo){
            ((Parrafo)o).setTexto(b.toString());
        }
        else if(o instanceof TextoA){
          ((TextoA)o).setTexto(b.toString());
        }
        else if(o instanceof TextoB){
          ((TextoB)o).setTexto(b.toString());
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_set",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // st_set ::= VAR2 VARIABLE CONCATENACION R_SETALINEACION ABRE block_echo CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Object o = lista_variable.get("#"+a.toString().toLowerCase()).getValue();
        if(o instanceof Parrafo){
            ((Parrafo)o).setAlineacion(b.toString());
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_set",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // st_insert ::= VAR2 VARIABLE CONCATENACION R_INSERTAR ABRE CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
        Object o = lista_variable.get("#"+a.toString().toLowerCase()).getValue();
        if(o instanceof Image){
            RESULT = ((Image)o).getHtml();
        }
        else if(o instanceof Boton){
            RESULT = ((Boton)o).getHtml();
        }
        else if(o instanceof Parrafo){
            RESULT = ((Parrafo)o).getHtml();
        }
        else if(o instanceof TextoA){
            RESULT = ((TextoA)o).getHtml();
        }
        else if(o instanceof TextoB){
            RESULT = ((TextoB)o).getHtml();
        }
        else if(o instanceof Tabla){
            RESULT = ((Tabla)o).getHtml();
        }
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_insert",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // st_insert ::= VAR2 VARIABLE CONCATENACION R_CLICKBOTON ABRE block_echo CIERRA PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        Object o = lista_variable.get("#"+a.toString().toLowerCase()).getValue();
        if(o instanceof Boton){
            String id = ((Boton)o).getId();
            RESULT = "\n<script> document.getElementById(\"" + id + "\").onclick = function(){alert(\"" + b + "\");};</script>\n";
        }
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_insert",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // st_get ::= VAR2 VARIABLE CONCATENACION R_GETALTO ABRE CIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          Object o = lista_variable.get("#"+a.toString().toLowerCase()).getValue();
          if(o instanceof Image){
              RESULT = ((Image)o).getAlto();
          }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_get",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // st_get ::= VAR2 VARIABLE CONCATENACION R_GETPATH ABRE CIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          Object o = lista_variable.get("#"+a.toString().toLowerCase()).getValue();
          if(o instanceof Image){
              RESULT = ((Image)o).getPath();
          }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_get",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // st_get ::= VAR2 VARIABLE CONCATENACION R_GETANCHO ABRE CIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          Object o = lista_variable.get("#"+a.toString().toLowerCase()).getValue();
          if(o instanceof Image){
              RESULT = ((Image)o).getAncho();
          }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_get",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // st_get ::= VAR2 VARIABLE CONCATENACION R_GETTEXTO ABRE CIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          Object o = lista_variable.get("#"+a.toString().toLowerCase()).getValue();
          if(o instanceof Boton){
              RESULT = ((Boton)o).getTexto();
          }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_get",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // st_get ::= VAR2 VARIABLE CONCATENACION R_GETCONTENIDO ABRE CIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          Object o = lista_variable.get("#"+a.toString().toLowerCase()).getValue();
          if(o instanceof Parrafo){
              RESULT = ((Parrafo)o).getTexto();
          }
          else if(o instanceof TextoA){
            RESULT = ((TextoA)o).getTexto();
          }
          else if(o instanceof TextoB){
            RESULT = ((TextoB)o).getTexto();
          }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_get",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // st_get ::= VAR2 VARIABLE CONCATENACION R_GETALINEACION ABRE CIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
          Object o = lista_variable.get("#"+a.toString().toLowerCase()).getValue();
          if(o instanceof Parrafo){
              RESULT = ((Parrafo)o).getAlineacion();
          }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("st_get",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cad_var ::= block_echo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a.toString();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cad_var",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // lst_parrafo ::= cad_var 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Pojos.Parrafo(a.toString());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lst_parrafo",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // lst_parrafo ::= cad_var COMA cad_var 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Pojos.Parrafo(a.toString(),b.toString());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lst_parrafo",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // lst_img ::= cad_var 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Pojos.Image(a.toString(),100,100);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lst_img",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // lst_img ::= cad_var COMA expr_logica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Pojos.Image(a.toString(),(int)b,100);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lst_img",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // lst_img ::= cad_var COMA expr_logica COMA expr_logica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Pojos.Image(a.toString(),(int)b,(int)c);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lst_img",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // lst_boton ::= cad_var 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Pojos.Boton(a.toString(),"default");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lst_boton",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // lst_boton ::= cad_var COMA cad_var 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Pojos.Boton(a.toString(),b.toString());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lst_boton",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // lst_table ::= ls_row 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ArrayList<String>> a = (ArrayList<ArrayList<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new Pojos.Tabla(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lst_table",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ls_row ::= ls_row COMA CORCHETEIZQUIERDA ls_col CORCHETEDERECHA 
            {
              ArrayList<ArrayList<String>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<ArrayList<String>> a = (ArrayList<ArrayList<String>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> b = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = a;
        RESULT.add(b);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls_row",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ls_row ::= CORCHETEIZQUIERDA ls_col CORCHETEDERECHA 
            {
              ArrayList<ArrayList<String>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new ArrayList<>();
        RESULT.add(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls_row",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ls_col ::= ls_col COMA block_echo 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
        RESULT.add(b.toString());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls_col",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ls_col ::= block_echo 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = new ArrayList<>();
        RESULT.add(a.toString());
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ls_col",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // block_echo ::= block_echo CONCATENACION e_echo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a.toString() + " " + b.toString();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_echo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // block_echo ::= e_echo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_echo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // e_echo ::= expr_logica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_echo",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // block_if ::= R_IF ABRE expr_logica CIERRA LLAVEIZQUIERDA list_hsp LLAVEDERECHA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<statement.St> b = (ArrayList<statement.St>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new statement.St_If((boolean)a,b);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_if",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // block_if ::= R_IF ABRE expr_logica CIERRA LLAVEIZQUIERDA list_hsp LLAVEDERECHA R_ELSE LLAVEIZQUIERDA list_hsp LLAVEDERECHA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<statement.St> b = (ArrayList<statement.St>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<statement.St> c = (ArrayList<statement.St>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new statement.St_IfElse((boolean)a,b,c);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_if",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // block_repetir ::= R_REPETIR ABRE expr_rep CIERRA LLAVEIZQUIERDA list_hsp LLAVEDERECHA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<statement.St> b = (ArrayList<statement.St>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new statement.St_While((Integer)a,b);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_repetir",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr_rep ::= expr_rep MAS expr_rep 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = (Integer) a + (Integer) b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rep",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr_rep ::= expr_rep MENOS expr_rep 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = (Integer) a - (Integer) b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rep",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expr_rep ::= expr_rep POR expr_rep 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = (Integer) a * (Integer) b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rep",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expr_rep ::= expr_rep ENTRE expr_rep 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = (Integer) a / (Integer) b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rep",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expr_rep ::= MENOS expr_rep 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = -(Integer) a;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rep",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expr_rep ::= ABRE expr_rep CIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = a;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rep",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expr_rep ::= ENTERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = Integer.parseInt(n.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rep",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expr_rep ::= VAR1 VARIABLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*************BUSCAR VARIABLE**********/
            Object o = lista_variable.get("$"+a.toString().toLowerCase()).getValue();
            if(o instanceof Integer){
                RESULT = (Integer) o;
            }
            else{
                RESULT = 0;
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rep",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expr_rep ::= st_get 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = a;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rep",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expr_logica ::= expr_logica AND expr_logica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = (boolean)a && (boolean)b;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expr_logica ::= expr_logica OR expr_logica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = (boolean)a || (boolean)b;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expr_logica ::= NOT expr_logica 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = !(boolean)a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expr_logica ::= expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expr ::= expr IGUAL_LOGICO expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          if(a instanceof String || b instanceof String){
              RESULT = a.toString().compareTo(b.toString()) == 0;
          }
          else if(a instanceof Integer && b instanceof Integer){
              RESULT = (Integer) a == (Integer) b;
          }
          else if(a instanceof Float || b instanceof Float){
              RESULT = Float.parseFloat(a.toString()) == Float.parseFloat(b.toString());
          }
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expr ::= expr DESIGUAL expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(a instanceof String || b instanceof String){
              RESULT = a.toString().compareTo(b.toString()) != 0;
          }
          else if(a instanceof Integer && b instanceof Integer){
              RESULT = (Integer) a != (Integer) b;
          }
          else if(a instanceof Float || b instanceof Float){
              RESULT = Float.parseFloat(a.toString()) != Float.parseFloat(b.toString());
          }
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expr ::= expr MAYOR expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          if(a instanceof String || b instanceof String){
              RESULT = a.toString().compareTo(b.toString()) > 0;
          }
          else if(a instanceof Integer && b instanceof Integer){
              RESULT = (Integer) a > (Integer) b;
          }
          else if(a instanceof Float || b instanceof Float){
              RESULT = Float.parseFloat(a.toString()) > Float.parseFloat(b.toString());
          }
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expr ::= expr MAYOR_IGUAL expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          if(a instanceof String || b instanceof String){
              RESULT = a.toString().compareTo(b.toString()) >= 0;
          }
          else if(a instanceof Integer && b instanceof Integer){
              RESULT = (Integer) a >= (Integer) b;
          }
          else if(a instanceof Float || b instanceof Float){
              RESULT = Float.parseFloat(a.toString()) >= Float.parseFloat(b.toString());
          }
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expr ::= expr MENOR expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          if(a instanceof String || b instanceof String){
              RESULT = a.toString().compareTo(b.toString()) < 0;
          }
          else if(a instanceof Integer && b instanceof Integer){
              RESULT = (Integer) a < (Integer) b;
          }
          else if(a instanceof Float || b instanceof Float){
              RESULT = Float.parseFloat(a.toString()) < Float.parseFloat(b.toString());
          }
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expr ::= expr MENOR_IGUAL expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          if(a instanceof String || b instanceof String){
              RESULT = a.toString().compareTo(b.toString()) <= 0;
          }
          else if(a instanceof Integer && b instanceof Integer){
              RESULT = (Integer) a <= (Integer) b;
          }
          else if(a instanceof Float || b instanceof Float){
              RESULT = Float.parseFloat(a.toString()) <= Float.parseFloat(b.toString());
          }
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expr ::= expr MAS expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          if(a instanceof Integer && b instanceof Integer){
              RESULT = (Integer) a + (Integer) b;
          }
          else{
              RESULT = Float.parseFloat(a.toString()) + Float.parseFloat(b.toString());
          }
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expr ::= expr MENOS expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          if(a instanceof Integer && b instanceof Integer){
              RESULT = (Integer) a - (Integer) b;
          }
          else{
              RESULT = Float.parseFloat(a.toString()) - Float.parseFloat(b.toString());
          }
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expr ::= expr POR expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          if(a instanceof Integer && b instanceof Integer){
              RESULT = (Integer) a * (Integer) b;
          }
          else{
              RESULT = Float.parseFloat(a.toString()) * Float.parseFloat(b.toString());
          }
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expr ::= expr ENTRE expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          if(a instanceof Integer && b instanceof Integer){
              RESULT = (Integer) a / (Integer) b;
          }
          else{
              RESULT = Float.parseFloat(a.toString()) / Float.parseFloat(b.toString());
          }
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expr ::= MENOS expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          if(a instanceof Integer){
              RESULT = -(Integer) a;
          }
          else{
              RESULT = -Float.parseFloat(a.toString());
          }
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expr ::= ENTERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          RESULT = Integer.parseInt(n.toString());
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expr ::= DECIMAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          RESULT = Float.parseFloat(n.toString());
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expr ::= VAR1 VARIABLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          /*************BUSCAR VARIABLE**********/
          Object o = lista_variable.get("$"+a.toString().toLowerCase()).getValue();
          if(o instanceof Integer){
              RESULT = (Integer) o;
          }
          else if(o instanceof String){
              RESULT = (String) o;
          }
          else if(o instanceof Float){
              RESULT = (Float) o;
          }
          else if(o instanceof Boolean){
              RESULT = (Boolean) o;
          }
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expr ::= R_TRUE 
            {
              Object RESULT =null;
		
          RESULT = true;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expr ::= R_FALSE 
            {
              Object RESULT =null;
		
          RESULT = false;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expr ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          RESULT = a.toString().replaceAll("\"","");
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expr ::= st_get 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          RESULT = a;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expr ::= ABRE expr_logica CIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          RESULT = a;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
