
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.*;
import java.util.Objects;
import java_cup.runtime.XMLElement;
import static proyecto1_c1.Principal.lista_variable;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\012\000\002\003" +
    "\004\000\002\003\003\000\002\004\012\000\002\004\011" +
    "\000\002\004\013\000\002\004\012\000\002\010\005\000" +
    "\002\010\002\000\002\005\011\000\002\006\004\000\002" +
    "\006\003\000\002\007\012\000\002\007\006\000\002\007" +
    "\013\000\002\007\012\000\002\007\011\000\002\007\011" +
    "\000\002\007\012\000\002\007\012\000\002\007\005\000" +
    "\002\011\005\000\002\011\002\000\002\012\010\000\002" +
    "\014\004\000\002\014\003\000\002\013\005\000\002\013" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\002" +
    "\000\002\016\013\000\002\016\012\000\002\017\004\000" +
    "\002\017\003\000\002\020\012\000\002\020\012\000\002" +
    "\020\011\000\002\020\011\000\002\022\004\000\002\022" +
    "\003\000\002\021\012\000\002\021\006\000\002\021\012" +
    "\000\002\021\012\000\002\021\005\000\002\023\004\000" +
    "\002\023\003\000\002\024\007\000\002\024\003\000\002" +
    "\024\005\000\002\024\003\000\002\026\005\000\002\026" +
    "\003\000\002\030\003\000\002\025\011\000\002\025\015" +
    "\000\002\027\011\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\004\000\002" +
    "\032\005\000\002\032\003\000\002\032\004\000\002\031" +
    "\005\000\002\031\005\000\002\031\004\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\004\000\002\031\005\000\002\031\003\000\002\031\003" +
    "\000\002\031\004\000\002\031\003\000\002\031\003\000" +
    "\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0116\000\004\042\004\001\002\000\004\007\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\041\010\001\002\000\004\042\011\001\002\000" +
    "\006\010\020\012\017\001\002\000\004\042\014\001\002" +
    "\000\004\042\ufffe\001\002\000\010\005\016\010\020\012" +
    "\017\001\002\000\004\042\uffff\001\002\000\004\007\u0117" +
    "\001\002\000\006\013\041\041\ufff8\001\002\000\004\041" +
    "\021\001\002\000\004\042\022\001\002\000\006\005\030" +
    "\011\031\001\002\000\004\042\024\001\002\000\004\005" +
    "\025\001\002\000\004\010\026\001\002\000\004\041\027" +
    "\001\002\000\004\042\ufffd\001\002\000\004\010\037\001" +
    "\002\000\004\041\032\001\002\000\004\042\033\001\002" +
    "\000\004\005\034\001\002\000\004\011\035\001\002\000" +
    "\004\041\036\001\002\000\004\042\ufff7\001\002\000\004" +
    "\041\040\001\002\000\004\042\ufffc\001\002\000\004\006" +
    "\u0115\001\002\000\004\041\043\001\002\000\006\042\044" +
    "\043\046\001\002\000\022\005\u0112\014\211\016\210\017" +
    "\213\020\207\021\204\022\212\023\206\001\002\000\006" +
    "\042\202\043\046\001\002\000\012\120\050\121\057\123" +
    "\053\127\051\001\002\000\006\042\ufff5\043\ufff5\001\002" +
    "\000\024\036\062\044\066\045\063\046\064\047\065\102" +
    "\072\107\067\117\070\127\061\001\002\000\004\126\170" +
    "\001\002\000\014\073\167\120\050\121\057\123\053\127" +
    "\051\001\002\000\004\102\141\001\002\000\016\073\uffcf" +
    "\114\uffcf\120\uffcf\121\uffcf\123\uffcf\127\uffcf\001\002\000" +
    "\016\073\uffcd\114\uffcd\120\uffcd\121\uffcd\123\uffcd\127\uffcd" +
    "\001\002\000\016\073\uffd1\114\uffd1\120\uffd1\121\uffd1\123" +
    "\uffd1\127\uffd1\001\002\000\004\102\060\001\002\000\024" +
    "\036\062\044\066\045\063\046\064\047\065\102\072\107" +
    "\067\117\070\127\061\001\002\000\004\126\140\001\002" +
    "\000\040\074\uffaa\075\uffaa\076\uffaa\077\uffaa\100\uffaa\101" +
    "\uffaa\103\uffaa\104\uffaa\105\uffaa\106\uffaa\110\uffaa\111\uffaa" +
    "\112\uffaa\115\uffaa\116\uffaa\001\002\000\040\074\uffae\075" +
    "\uffae\076\uffae\077\uffae\100\uffae\101\uffae\103\uffae\104\uffae" +
    "\105\uffae\106\uffae\110\uffae\111\uffae\112\uffae\115\uffae\116" +
    "\uffae\001\002\000\040\074\uffac\075\uffac\076\uffac\077\uffac" +
    "\100\uffac\101\uffac\103\uffac\104\uffac\105\uffac\106\uffac\110" +
    "\uffac\111\uffac\112\uffac\115\uffac\116\uffac\001\002\000\040" +
    "\074\uffab\075\uffab\076\uffab\077\uffab\100\uffab\101\uffab\103" +
    "\uffab\104\uffab\105\uffab\106\uffab\110\uffab\111\uffab\112\uffab" +
    "\115\uffab\116\uffab\001\002\000\040\074\uffaf\075\uffaf\076" +
    "\uffaf\077\uffaf\100\uffaf\101\uffaf\103\uffaf\104\uffaf\105\uffaf" +
    "\106\uffaf\110\uffaf\111\uffaf\112\uffaf\115\uffaf\116\uffaf\001" +
    "\002\000\024\036\062\044\066\045\063\046\064\047\065" +
    "\102\072\107\067\117\070\127\061\001\002\000\024\036" +
    "\062\044\066\045\063\046\064\047\065\102\072\107\067" +
    "\117\070\127\061\001\002\000\034\075\104\076\075\077" +
    "\101\100\102\103\125\104\076\105\105\106\106\110\100" +
    "\111\077\112\110\115\074\116\107\001\002\000\024\036" +
    "\062\044\066\045\063\046\064\047\065\102\072\107\067" +
    "\117\070\127\061\001\002\000\034\075\104\076\075\077" +
    "\101\100\102\103\103\104\076\105\105\106\106\110\100" +
    "\111\077\112\110\115\074\116\107\001\002\000\024\036" +
    "\062\044\066\045\063\046\064\047\065\102\072\107\067" +
    "\117\070\127\061\001\002\000\024\036\062\044\066\045" +
    "\063\046\064\047\065\102\072\107\067\117\070\127\061" +
    "\001\002\000\024\036\062\044\066\045\063\046\064\047" +
    "\065\102\072\107\067\117\070\127\061\001\002\000\024" +
    "\036\062\044\066\045\063\046\064\047\065\102\072\107" +
    "\067\117\070\127\061\001\002\000\024\036\062\044\066" +
    "\045\063\046\064\047\065\102\072\107\067\117\070\127" +
    "\061\001\002\000\024\036\062\044\066\045\063\046\064" +
    "\047\065\102\072\107\067\117\070\127\061\001\002\000" +
    "\024\036\062\044\066\045\063\046\064\047\065\102\072" +
    "\107\067\117\070\127\061\001\002\000\040\074\uffb0\075" +
    "\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0\103\uffb0\104\uffb0" +
    "\105\uffb0\106\uffb0\110\uffb0\111\uffb0\112\uffb0\115\uffb0\116" +
    "\uffb0\001\002\000\024\036\062\044\066\045\063\046\064" +
    "\047\065\102\072\107\067\117\070\127\061\001\002\000" +
    "\024\036\062\044\066\045\063\046\064\047\065\102\072" +
    "\107\067\117\070\127\061\001\002\000\024\036\062\044" +
    "\066\045\063\046\064\047\065\102\072\107\067\117\070" +
    "\127\061\001\002\000\024\036\062\044\066\045\063\046" +
    "\064\047\065\102\072\107\067\117\070\127\061\001\002" +
    "\000\024\036\062\044\066\045\063\046\064\047\065\102" +
    "\072\107\067\117\070\127\061\001\002\000\040\074\uffbb" +
    "\075\104\076\075\077\101\100\102\101\uffbb\103\uffbb\104" +
    "\uffbb\105\uffbb\106\uffbb\110\uffbb\111\uffbb\112\uffbb\115\uffbb" +
    "\116\uffbb\001\002\000\040\074\uffbe\075\104\076\075\077" +
    "\101\100\102\101\uffbe\103\uffbe\104\076\105\105\106\106" +
    "\110\100\111\077\112\110\115\074\116\uffbe\001\002\000" +
    "\040\074\uffb6\075\104\076\075\077\101\100\102\101\uffb6" +
    "\103\uffb6\104\uffb6\105\uffb6\106\uffb6\110\uffb6\111\uffb6\112" +
    "\uffb6\115\uffb6\116\uffb6\001\002\000\040\074\uffb9\075\104" +
    "\076\075\077\101\100\102\101\uffb9\103\uffb9\104\uffb9\105" +
    "\uffb9\106\uffb9\110\uffb9\111\uffb9\112\uffb9\115\uffb9\116\uffb9" +
    "\001\002\000\040\074\uffb5\075\uffb5\076\uffb5\077\101\100" +
    "\102\101\uffb5\103\uffb5\104\uffb5\105\uffb5\106\uffb5\110\uffb5" +
    "\111\uffb5\112\uffb5\115\uffb5\116\uffb5\001\002\000\040\074" +
    "\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\103\uffb2" +
    "\104\uffb2\105\uffb2\106\uffb2\110\uffb2\111\uffb2\112\uffb2\115" +
    "\uffb2\116\uffb2\001\002\000\040\074\uffb3\075\uffb3\076\uffb3" +
    "\077\uffb3\100\uffb3\101\uffb3\103\uffb3\104\uffb3\105\uffb3\106" +
    "\uffb3\110\uffb3\111\uffb3\112\uffb3\115\uffb3\116\uffb3\001\002" +
    "\000\040\074\uffb8\075\104\076\075\077\101\100\102\101" +
    "\uffb8\103\uffb8\104\uffb8\105\uffb8\106\uffb8\110\uffb8\111\uffb8" +
    "\112\uffb8\115\uffb8\116\uffb8\001\002\000\040\074\uffba\075" +
    "\104\076\075\077\101\100\102\101\uffba\103\uffba\104\uffba" +
    "\105\uffba\106\uffba\110\uffba\111\uffba\112\uffba\115\uffba\116" +
    "\uffba\001\002\000\040\074\uffb7\075\104\076\075\077\101" +
    "\100\102\101\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7\110" +
    "\uffb7\111\uffb7\112\uffb7\115\uffb7\116\uffb7\001\002\000\040" +
    "\074\uffb4\075\uffb4\076\uffb4\077\101\100\102\101\uffb4\103" +
    "\uffb4\104\uffb4\105\uffb4\106\uffb4\110\uffb4\111\uffb4\112\uffb4" +
    "\115\uffb4\116\uffb4\001\002\000\040\074\uffbd\075\104\076" +
    "\075\077\101\100\102\101\uffbd\103\uffbd\104\076\105\105" +
    "\106\106\110\100\111\077\112\110\115\uffbd\116\uffbd\001" +
    "\002\000\004\113\126\001\002\000\012\120\050\121\057" +
    "\123\053\127\051\001\002\000\014\114\130\120\050\121" +
    "\057\123\053\127\051\001\002\000\020\073\uffc9\114\uffc9" +
    "\120\uffc9\121\uffc9\122\132\123\uffc9\127\uffc9\001\002\000" +
    "\016\073\uffd2\114\uffd2\120\uffd2\121\uffd2\123\uffd2\127\uffd2" +
    "\001\002\000\004\113\133\001\002\000\012\120\050\121" +
    "\057\123\053\127\051\001\002\000\014\114\135\120\050" +
    "\121\057\123\053\127\051\001\002\000\016\073\uffc8\114" +
    "\uffc8\120\uffc8\121\uffc8\123\uffc8\127\uffc8\001\002\000\040" +
    "\074\uffbc\075\104\076\075\077\101\100\102\101\uffbc\103" +
    "\uffbc\104\076\105\105\106\106\110\100\111\077\112\110" +
    "\115\uffbc\116\uffbc\001\002\000\040\074\uffb1\075\uffb1\076" +
    "\uffb1\077\uffb1\100\uffb1\101\uffb1\103\uffb1\104\uffb1\105\uffb1" +
    "\106\uffb1\110\uffb1\111\uffb1\112\uffb1\115\uffb1\116\uffb1\001" +
    "\002\000\040\074\uffad\075\uffad\076\uffad\077\uffad\100\uffad" +
    "\101\uffad\103\uffad\104\uffad\105\uffad\106\uffad\110\uffad\111" +
    "\uffad\112\uffad\115\uffad\116\uffad\001\002\000\012\044\146" +
    "\102\145\107\144\127\142\001\002\000\004\126\166\001" +
    "\002\000\014\075\151\076\153\077\154\100\152\103\162" +
    "\001\002\000\012\044\146\102\145\107\144\127\142\001" +
    "\002\000\012\044\146\102\145\107\144\127\142\001\002" +
    "\000\014\075\uffc0\076\uffc0\077\uffc0\100\uffc0\103\uffc0\001" +
    "\002\000\014\075\151\076\153\077\154\100\152\103\150" +
    "\001\002\000\014\075\uffc1\076\uffc1\077\uffc1\100\uffc1\103" +
    "\uffc1\001\002\000\012\044\146\102\145\107\144\127\142" +
    "\001\002\000\012\044\146\102\145\107\144\127\142\001" +
    "\002\000\012\044\146\102\145\107\144\127\142\001\002" +
    "\000\012\044\146\102\145\107\144\127\142\001\002\000" +
    "\014\075\uffc4\076\uffc4\077\uffc4\100\uffc4\103\uffc4\001\002" +
    "\000\014\075\uffc5\076\uffc5\077\154\100\152\103\uffc5\001" +
    "\002\000\014\075\uffc3\076\uffc3\077\uffc3\100\uffc3\103\uffc3" +
    "\001\002\000\014\075\uffc6\076\uffc6\077\154\100\152\103" +
    "\uffc6\001\002\000\014\075\uffc2\076\uffc2\077\uffc2\100\uffc2" +
    "\103\uffc2\001\002\000\004\113\163\001\002\000\012\120" +
    "\050\121\057\123\053\127\051\001\002\000\014\114\165" +
    "\120\050\121\057\123\053\127\051\001\002\000\016\073" +
    "\uffc7\114\uffc7\120\uffc7\121\uffc7\123\uffc7\127\uffc7\001\002" +
    "\000\014\075\uffbf\076\uffbf\077\uffbf\100\uffbf\103\uffbf\001" +
    "\002\000\006\042\uffec\043\uffec\001\002\000\004\006\171" +
    "\001\002\000\024\036\062\044\066\045\063\046\064\047" +
    "\065\102\072\107\067\117\070\127\061\001\002\000\006" +
    "\074\175\101\176\001\002\000\036\074\uffca\075\104\076" +
    "\075\077\101\100\102\101\uffca\104\076\105\105\106\106" +
    "\110\100\111\077\112\110\115\074\116\107\001\002\000" +
    "\006\074\uffcb\101\uffcb\001\002\000\016\073\uffd0\114\uffd0" +
    "\120\uffd0\121\uffd0\123\uffd0\127\uffd0\001\002\000\024\036" +
    "\062\044\066\045\063\046\064\047\065\102\072\107\067" +
    "\117\070\127\061\001\002\000\006\074\uffcc\101\uffcc\001" +
    "\002\000\006\074\201\101\176\001\002\000\016\073\uffce" +
    "\114\uffce\120\uffce\121\uffce\123\uffce\127\uffce\001\002\000" +
    "\022\005\205\014\211\016\210\017\213\020\207\021\204" +
    "\022\212\023\206\001\002\000\006\042\ufff6\043\ufff6\001" +
    "\002\000\004\041\u010d\001\002\000\006\012\u010b\015\u0107" +
    "\001\002\000\004\041\u0101\001\002\000\004\041\374\001" +
    "\002\000\006\037\255\041\uffe2\001\002\000\006\037\244" +
    "\041\uffea\001\002\000\004\037\230\001\002\000\004\037" +
    "\214\001\002\000\004\006\225\001\002\000\006\037\uffe7" +
    "\041\uffe7\001\002\000\006\037\214\041\220\001\002\000" +
    "\006\037\uffe8\041\uffe8\001\002\000\004\042\221\001\002" +
    "\000\004\005\222\001\002\000\004\017\223\001\002\000" +
    "\004\041\224\001\002\000\006\042\ufff1\043\ufff1\001\002" +
    "\000\006\036\227\040\226\001\002\000\006\037\uffe5\041" +
    "\uffe5\001\002\000\006\037\uffe6\041\uffe6\001\002\000\004" +
    "\006\237\001\002\000\004\041\232\001\002\000\004\042" +
    "\233\001\002\000\004\005\234\001\002\000\004\022\235" +
    "\001\002\000\004\041\236\001\002\000\006\042\uffee\043" +
    "\uffee\001\002\000\004\036\240\001\002\000\004\037\241" +
    "\001\002\000\004\006\242\001\002\000\004\036\243\001" +
    "\002\000\004\041\uffe9\001\002\000\004\006\253\001\002" +
    "\000\004\041\246\001\002\000\004\042\247\001\002\000" +
    "\004\005\250\001\002\000\004\014\251\001\002\000\004" +
    "\041\252\001\002\000\006\042\ufff4\043\ufff4\001\002\000" +
    "\004\036\254\001\002\000\004\041\uffeb\001\002\000\004" +
    "\006\371\001\002\000\004\041\257\001\002\000\004\042" +
    "\260\001\002\000\004\033\362\001\002\000\004\042\262" +
    "\001\002\000\006\005\263\033\264\001\002\000\004\016" +
    "\360\001\002\000\004\041\265\001\002\000\004\042\266" +
    "\001\002\000\006\034\273\035\274\001\002\000\004\042" +
    "\271\001\002\000\004\042\uffde\001\002\000\010\005\275" +
    "\034\273\035\274\001\002\000\004\042\uffdf\001\002\000" +
    "\004\041\346\001\002\000\004\041\300\001\002\000\004" +
    "\033\276\001\002\000\004\041\277\001\002\000\004\042" +
    "\uffe1\001\002\000\006\042\301\043\304\001\002\000\012" +
    "\005\343\014\312\017\314\022\313\001\002\000\006\042" +
    "\uffd8\043\uffd8\001\002\000\006\042\307\043\304\001\002" +
    "\000\012\120\050\121\057\123\053\127\051\001\002\000" +
    "\014\073\306\120\050\121\057\123\053\127\051\001\002" +
    "\000\006\042\uffd3\043\uffd3\001\002\000\012\005\311\014" +
    "\312\017\314\022\313\001\002\000\006\042\uffd9\043\uffd9" +
    "\001\002\000\006\015\340\035\337\001\002\000\006\037" +
    "\244\041\uffea\001\002\000\004\037\230\001\002\000\004" +
    "\037\214\001\002\000\006\037\214\041\316\001\002\000" +
    "\004\042\317\001\002\000\004\005\320\001\002\000\004" +
    "\017\321\001\002\000\004\041\322\001\002\000\006\042" +
    "\uffd5\043\uffd5\001\002\000\004\041\324\001\002\000\004" +
    "\042\325\001\002\000\004\005\326\001\002\000\004\022" +
    "\327\001\002\000\004\041\330\001\002\000\006\042\uffd4" +
    "\043\uffd4\001\002\000\004\041\332\001\002\000\004\042" +
    "\333\001\002\000\004\005\334\001\002\000\004\014\335" +
    "\001\002\000\004\041\336\001\002\000\006\042\uffd7\043" +
    "\uffd7\001\002\000\004\041\342\001\002\000\004\041\341" +
    "\001\002\000\006\042\uffd6\043\uffd6\001\002\000\004\042" +
    "\uffdc\001\002\000\006\015\340\035\344\001\002\000\004" +
    "\041\345\001\002\000\004\042\uffdb\001\002\000\006\042" +
    "\347\043\304\001\002\000\012\005\355\014\312\017\314" +
    "\022\313\001\002\000\006\042\351\043\304\001\002\000" +
    "\012\005\352\014\312\017\314\022\313\001\002\000\006" +
    "\015\340\034\353\001\002\000\004\041\354\001\002\000" +
    "\004\042\uffdd\001\002\000\006\015\340\034\356\001\002" +
    "\000\004\041\357\001\002\000\004\042\uffda\001\002\000" +
    "\004\041\361\001\002\000\006\042\ufff2\043\ufff2\001\002" +
    "\000\004\041\363\001\002\000\004\042\266\001\002\000" +
    "\004\042\365\001\002\000\010\005\366\034\273\035\274" +
    "\001\002\000\004\033\367\001\002\000\004\041\370\001" +
    "\002\000\004\042\uffe0\001\002\000\006\036\373\037\372" +
    "\001\002\000\004\041\uffe4\001\002\000\004\041\uffe3\001" +
    "\002\000\004\042\375\001\002\000\004\005\376\001\002" +
    "\000\004\020\377\001\002\000\004\041\u0100\001\002\000" +
    "\006\042\ufff0\043\ufff0\001\002\000\006\042\u0102\043\046" +
    "\001\002\000\022\005\u010a\014\211\016\210\017\213\020" +
    "\207\021\204\022\212\023\206\001\002\000\006\042\u0104" +
    "\043\046\001\002\000\022\005\u0105\014\211\016\210\017" +
    "\213\020\207\021\204\022\212\023\206\001\002\000\006" +
    "\015\u0107\023\u0106\001\002\000\004\041\u0109\001\002\000" +
    "\004\041\u0108\001\002\000\006\042\ufff3\043\ufff3\001\002" +
    "\000\006\042\uffed\043\uffed\001\002\000\004\015\u0107\001" +
    "\002\000\004\041\u010c\001\002\000\004\042\ufffb\001\002" +
    "\000\004\042\u010e\001\002\000\004\005\u010f\001\002\000" +
    "\004\021\u0110\001\002\000\004\041\u0111\001\002\000\006" +
    "\042\uffef\043\uffef\001\002\000\006\012\u0113\015\u0107\001" +
    "\002\000\004\041\u0114\001\002\000\004\042\ufffa\001\002" +
    "\000\004\036\u0116\001\002\000\004\041\ufff9\001\002\000" +
    "\004\041\u0118\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0116\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\011\004\012\001\001\000\002\001\001\000\004\004" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\041\001\001\000" +
    "\002\001\001\000\004\005\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\044\007\046\001\001\000\002\001\001\000\004" +
    "\007\202\001\001\000\012\023\051\024\055\025\053\027" +
    "\054\001\001\000\002\001\001\000\010\026\177\030\173" +
    "\031\172\001\001\000\002\001\001\000\010\024\130\025" +
    "\053\027\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\136\001\001\000\004\031\135" +
    "\001\001\000\002\001\001\000\004\031\072\001\001\000" +
    "\002\001\001\000\004\031\123\001\001\000\004\031\122" +
    "\001\001\000\004\031\121\001\001\000\004\031\120\001" +
    "\001\000\004\031\117\001\001\000\004\031\116\001\001" +
    "\000\004\031\115\001\001\000\002\001\001\000\004\031" +
    "\114\001\001\000\004\031\113\001\001\000\004\031\112" +
    "\001\001\000\004\031\111\001\001\000\004\031\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\023\126\024\055\025\053\027\054\001\001" +
    "\000\010\024\130\025\053\027\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\023\133" +
    "\024\055\025\053\027\054\001\001\000\010\024\130\025" +
    "\053\027\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\160" +
    "\001\001\000\004\032\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\157\001\001" +
    "\000\004\032\156\001\001\000\004\032\155\001\001\000" +
    "\004\032\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\023\163\024\055\025\053\027\054" +
    "\001\001\000\010\024\130\025\053\027\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\026\171\030\173\031\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\030\176\031\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\255\001\001" +
    "\000\004\011\244\001\001\000\004\012\230\001\001\000" +
    "\006\013\214\014\215\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\216\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\266\020\267\001" +
    "\001\000\002\001\001\000\004\020\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\301\022\302\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\307\001\001" +
    "\000\012\023\304\024\055\025\053\027\054\001\001\000" +
    "\010\024\130\025\053\027\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\330\001\001\000\004\012\322\001\001\000\006" +
    "\013\214\014\314\001\001\000\004\013\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\301\022\347\001\001\000" +
    "\002\001\001\000\004\021\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\363\020\267\001\001\000\004\020\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\u0102\007\046" +
    "\001\001\000\002\001\001\000\004\007\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    javax.swing.JTextArea txt_console;
    public parser(java_cup.runtime.Scanner s,javax.swing.JTextArea txt_console) {super(s); this.txt_console = txt_console;}

    /*Variable global que guarda el html*/
    public StringBuilder bf = new StringBuilder();

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
    }

    /*validar fondo*/
    public String validaFondo(String color){
        switch (color.toLowerCase()){
            case "rojo":
                return "red";
            case "azul":
                return "blue";
            case "verde":
                return "green";
            case "gris":
                return "gray";
            case "negro":
                return "black";
            case "amarillo":
                return "yellow";
            case "rosado":
                return "pink";
            default:
                if(color.length()==7 && color.charAt(0)=='#'){
                    try {
                        Integer.parseInt(color.substring(1, 6), 16);
                        return color;
                    } 
                    catch (NumberFormatException e) {
                        return "#00000";
                    }
                }
            return "#00000";
        }
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= TEXTO R_COMPI CIERRA_ETIQUETA inner TEXTO SLASH R_COMPI CIERRA_ETIQUETA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
    bf.append("<html>");
    bf.append(a);
    bf.append("</html>");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inner ::= inner t_inner 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a + b;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inner",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inner ::= t_inner 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inner",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // t_inner ::= TEXTO R_CABECERA CIERRA_ETIQUETA inner_cabecera TEXTO SLASH R_CABECERA CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "head>" + b + c + "/head>";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_inner",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // t_inner ::= TEXTO R_CABECERA CIERRA_ETIQUETA TEXTO SLASH R_CABECERA CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "head>" + b + "/head>";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_inner",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // t_inner ::= TEXTO R_CUERPO op_cuerpo CIERRA_ETIQUETA inner_cuerpo TEXTO SLASH R_CUERPO CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        if(b==null){
            RESULT = a + "body>" + c + d + "/body>"; 
        }
        else{
            RESULT = a + "body " + b + ">" + c + d + "/body>"; 
        }   
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_inner",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // t_inner ::= TEXTO R_CUERPO op_cuerpo CIERRA_ETIQUETA TEXTO SLASH R_CUERPO CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        if(b==null){
            RESULT = a + "body>" + c + "/body>"; 
        }
        else{
            RESULT = a + "body" + b + ">" + c + "/body>"; 
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t_inner",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // op_cuerpo ::= R_FONDO IGUAL CADENA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = "bgcolor=" + validaFondo(a.toString().replaceAll("\"", ""));
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_cuerpo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // op_cuerpo ::= 
            {
              String RESULT =null;
		/*epsilon*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_cuerpo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inner_cabecera ::= TEXTO R_TITULO CIERRA_ETIQUETA TEXTO SLASH R_TITULO CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "title>" + b + "/title>";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inner_cabecera",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inner_cuerpo ::= inner_cuerpo tipo_cuerpo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a + b;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inner_cuerpo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inner_cuerpo ::= tipo_cuerpo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inner_cuerpo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo_cuerpo ::= TEXTO R_PARRAFO op_parrafo CIERRA_ETIQUETA TEXTO SLASH R_PARRAFO CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        if(b==null){
            RESULT = a + "p>" + c + "/p>";
        }
        else{
            RESULT = a + "p " + b + ">" + c + "/p>";
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_cuerpo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_cuerpo ::= TEXTO SLASH R_SALTO CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "br>";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_cuerpo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_cuerpo ::= TEXTO R_TABLA op_tabla CIERRA_ETIQUETA lista_tabla TEXTO SLASH R_TABLA CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "table " + b + ">" + c + d + "/table>";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_cuerpo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo_cuerpo ::= TEXTO R_IMAGEN list_img CIERRA_ETIQUETA TEXTO SLASH R_IMAGEN CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "image " + b + ">" + c + "/image>";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_cuerpo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo_cuerpo ::= TEXTO R_TEXTOA CIERRA_ETIQUETA TEXTO SLASH R_TEXTOA CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "h4>" + b + "/h4>";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_cuerpo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_cuerpo ::= TEXTO R_TEXTOB CIERRA_ETIQUETA TEXTO SLASH R_TEXTOB CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "h5>" + b + "/h5>";    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_cuerpo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_cuerpo ::= TEXTO R_BOTON op_boton CIERRA_ETIQUETA TEXTO SLASH R_BOTON CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "input type=\"button\" " + b + ">" + c.toString().replace("<"," ");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_cuerpo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo_cuerpo ::= TEXTO R_ESPACIO CIERRA_ETIQUETA inner_cuerpo TEXTO SLASH R_ESPACIO CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "div>" + b + c + "/div>";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_cuerpo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo_cuerpo ::= ABRE_HS list_hs R_CIERRAHS 
            {
              String RESULT =null;
		
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_cuerpo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // op_parrafo ::= ID IGUAL CADENA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(a.toString().equals("alineacion")){
            RESULT = "align=" + b;
        }
        else{
            RESULT = "";
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_parrafo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // op_parrafo ::= 
            {
              String RESULT =null;
		 /*epsilon*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_parrafo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // op_boton ::= ID IGUAL CADENA ID IGUAL CADENA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		        
        RESULT = "id =" +  b.toString() + " value =" + d.toString();    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_boton",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // list_img ::= list_img op_imagen 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a + " " + b;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_img",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // list_img ::= op_imagen 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_img",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // op_imagen ::= ID IGUAL CADENA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a + "=" + b;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_imagen",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // op_imagen ::= ID IGUAL NUM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a + "=" + b;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_imagen",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // op_tabla ::= ID IGUAL ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = "border" + "=" + b;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_tabla",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // op_tabla ::= ID IGUAL CADENA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = "border" + "=" + b;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_tabla",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // op_tabla ::= 
            {
              String RESULT =null;
		/*epsilon*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_tabla",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_tabla ::= lista_tabla TEXTO R_FILA CIERRA_ETIQUETA lista_fila TEXTO SLASH R_FILA CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + b + "tr>" + c + d + "/tr>\n";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_tabla",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista_tabla ::= TEXTO R_FILA CIERRA_ETIQUETA lista_fila TEXTO SLASH R_FILA CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "tr>"+ b + c + "/tr>\n";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_tabla",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_fila ::= lista_fila tipo_columna 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a + b;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_fila",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_fila ::= tipo_columna 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_fila",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipo_columna ::= TEXTO R_COLUMNAC CIERRA_ETIQUETA lista_columna TEXTO SLASH R_COLUMNAC CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "th>" + b + c + "/th>\n";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_columna",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipo_columna ::= TEXTO R_COLUMNA CIERRA_ETIQUETA lista_columna TEXTO SLASH R_COLUMNA CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "th>" + b + c + "/th>\n";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_columna",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipo_columna ::= TEXTO R_COLUMNA CIERRA_ETIQUETA TEXTO SLASH R_COLUMNA CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "th>" + c + "/th>\n";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_columna",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipo_columna ::= TEXTO R_COLUMNAC CIERRA_ETIQUETA TEXTO SLASH R_COLUMNAC CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "th>" + c + "/th>\n";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_columna",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lista_columna ::= lista_columna op_columna 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a + "\n" + b;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_columna",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lista_columna ::= op_columna 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a + "\n";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_columna",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // op_columna ::= TEXTO R_PARRAFO op_parrafo CIERRA_ETIQUETA TEXTO SLASH R_PARRAFO CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        if(b==null){
            RESULT = a + "p>" + c + "/p>";
        }
        else{
            RESULT = a + "p " + b + ">" + c + "/p>";
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_columna",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // op_columna ::= TEXTO SLASH R_SALTO CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "br>";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_columna",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // op_columna ::= TEXTO R_IMAGEN list_img CIERRA_ETIQUETA TEXTO SLASH R_IMAGEN CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "image " + b + ">" + c + "/image>";
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_columna",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // op_columna ::= TEXTO R_BOTON op_boton CIERRA_ETIQUETA TEXTO SLASH R_BOTON CIERRA_ETIQUETA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
        RESULT = a + "input type=\"button\" " + b + ">" + c.toString().replace("<"," ");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_columna",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // op_columna ::= ABRE_HS list_hs R_CIERRAHS 
            {
              String RESULT =null;
		
        /*pendiente*/
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_columna",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // list_hs ::= list_hs op_hs 
            {
              Object RESULT =null;
		

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_hs",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // list_hs ::= op_hs 
            {
              Object RESULT =null;
		
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_hs",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // op_hs ::= VAR1 VARIABLE IGUAL block_echo PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        if(b instanceof Boolean){
            lista_variable.put(a.toString(),new Pojos.Variable(a.toString(),"Booleano",aleft,aright,b));
        }
        else if(b instanceof String){
            lista_variable.put(a.toString(),new Pojos.Variable(a.toString(),"Cadena",aleft,aright,b));
        }
        else if(b instanceof Integer){
            lista_variable.put(a.toString(),new Pojos.Variable(a.toString(),"Entero",aleft,aright,b));
        }
        else if(b instanceof Float){
            lista_variable.put(a.toString(),new Pojos.Variable(a.toString(),"Decimal",aleft,aright,b));
        }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_hs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // op_hs ::= block_if 
            {
              Object RESULT =null;
		
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_hs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // op_hs ::= R_ECHO block_echo PUNTOYCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        txt_console.append(a.toString()+"\n");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_hs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // op_hs ::= block_repetir 
            {
              Object RESULT =null;
		
    
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_hs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // block_echo ::= block_echo CONCATENACION e_echo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a.toString() + " " + b.toString();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_echo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // block_echo ::= e_echo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_echo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // e_echo ::= expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e_echo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // block_if ::= R_IF ABRE expr CIERRA LLAVEIZQUIERDA list_hs LLAVEDERECHA 
            {
              Object RESULT =null;
		

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // block_if ::= R_IF ABRE expr CIERRA LLAVEIZQUIERDA list_hs LLAVEDERECHA R_ELSE LLAVEIZQUIERDA list_hs LLAVEDERECHA 
            {
              Object RESULT =null;
		

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_if",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // block_repetir ::= R_REPETIR ABRE expr_rep CIERRA LLAVEIZQUIERDA list_hs LLAVEDERECHA 
            {
              Object RESULT =null;
		

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_repetir",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_rep ::= expr_rep MAS expr_rep 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = (Integer) a + (Integer) b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rep",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr_rep ::= expr_rep MENOS expr_rep 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = (Integer) a - (Integer) b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rep",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_rep ::= expr_rep POR expr_rep 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = (Integer) a * (Integer) b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rep",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr_rep ::= expr_rep ENTRE expr_rep 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = (Integer) a / (Integer) b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rep",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr_rep ::= MENOS1 expr_rep 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = -(Integer) a;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rep",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr_rep ::= ABRE expr_rep CIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = a;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rep",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_rep ::= ENTERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = Integer.parseInt(n.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rep",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr_rep ::= VAR1 VARIABLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*************BUSCAR VARIABLE**********/
            Object o = lista_variable.get(a.toString()).getValue();
            if(o instanceof Integer){
                RESULT = (Integer) o;
            }
            else{
                RESULT = 0;
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_rep",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= expr OR expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = (boolean)a || (boolean)b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= expr AND expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = (boolean)a && (boolean)b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= NOT expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = !(boolean)a;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= expr IGUAL_LOGICO expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            if(a instanceof String || b instanceof String){
                RESULT = a.toString().compareTo(b.toString()) == 0;                
            }
            else if(a instanceof Integer && b instanceof Integer){
                RESULT = (Integer) a == (Integer) b;                
            }
            else if(a instanceof Float || b instanceof Float){
                RESULT = (float)a == (float)b;                
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= expr DESIGUAL expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
             if(a instanceof String || b instanceof String){
                RESULT = a.toString().compareTo(b.toString()) != 0;                
            }
            else if(a instanceof Integer && b instanceof Integer){
                RESULT = (Integer) a != (Integer) b;                
            }
            else if(a instanceof Float || b instanceof Float){
                RESULT = (float)a != (float)b;                
            }             
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= expr MAYOR expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            if(a instanceof String || b instanceof String){
                RESULT = a.toString().compareTo(b.toString()) > 0;
            }
            else if(a instanceof Integer && b instanceof Integer){
                RESULT = (Integer) a > (Integer) b;
            }
            else if(a instanceof Float || b instanceof Float){
                RESULT = (float)a > (float)b;
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= expr MAYOR_IGUAL expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(a instanceof String || b instanceof String){
                RESULT = a.toString().compareTo(b.toString()) >= 0;                
            }
            else if(a instanceof Integer && b instanceof Integer){
                RESULT = (Integer) a >= (Integer) b;                
            }
            else if(a instanceof Float || b instanceof Float){
                RESULT = (float)a >= (float)b;                
            } 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= expr MENOR expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(a instanceof String || b instanceof String){
                RESULT = a.toString().compareTo(b.toString()) < 0;                
            }
            else if(a instanceof Integer && b instanceof Integer){
                RESULT = (Integer) a < (Integer) b;
            }
            else if(a instanceof Float || b instanceof Float){
                RESULT = (float)a < (float)b;  
            } 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= expr MENOR_IGUAL expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            if(a instanceof String || b instanceof String){
                RESULT = a.toString().compareTo(b.toString()) <= 0;                
            }
            else if(a instanceof Integer && b instanceof Integer){
                RESULT = (Integer) a <= (Integer) b;
            }
            else if(a instanceof Float || b instanceof Float){
                RESULT = (float)a <= (float)b;  
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= expr MAS expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = (Integer) a + (Integer) b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= expr MENOS expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = (Integer) a - (Integer) b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= expr POR expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = (Integer) a * (Integer) b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= expr ENTRE expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            RESULT = (Integer) a / (Integer) b;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= MENOS1 expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = -(Integer) a;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= ABRE expr CIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = a;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= ENTERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = Integer.parseInt(n.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= DECIMAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = Float.parseFloat(n.toString());
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= VAR1 VARIABLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            /*************BUSCAR VARIABLE**********/
            Object o = lista_variable.get(a.toString()).getValue();
            if(o instanceof Integer){
                RESULT = (Integer) o;
            }
            else if(o instanceof String){
                RESULT = (String) o;
            }
            else if(o instanceof Float){
                RESULT = (Float) o;
            }
            else if(o instanceof Boolean){
                RESULT = (Boolean) o;
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= R_TRUE 
            {
              Object RESULT =null;
		
            RESULT = true;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= R_FALSE 
            {
              Object RESULT =null;
		
            RESULT = false;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = a.toString().replaceAll("\"","");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
