/* The following code was generated by JFlex 1.7.0 */

package analizador;
import java_cup.runtime.Symbol;


import static proyecto1_c1.Principal.token;
import static proyecto1_c1.Principal.errorLexer; 



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexer</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TEXTO = 2;
  public static final int HS_STATE = 4;
  public static final int COM_HTML = 6;
  public static final int COM_LIN = 8;
  public static final int COM_MLIN = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  7, 37, 37, 36,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1, 14,  6, 45, 44,  0, 48,  0, 42, 43, 38, 40,  0, 41,  5, 15, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  0, 39,  9, 17, 16, 10, 
     0, 24, 25, 18, 33, 26, 31, 34, 11, 23,  2, 51, 30, 20, 32, 19, 
    21,  2, 27, 13, 28, 29,  2,  2, 35,  2,  2,  0,  8,  0,  0,  3, 
     0, 24, 25, 18, 33, 26, 31, 34, 11, 23,  2, 51, 30, 20, 32, 19, 
    21,  2, 27, 13, 28, 29,  2,  2, 35,  2,  2, 46, 49, 47,  0,  0, 
     0,  0,  0,  0,  0, 37,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\1\1\3\1\7\1\10\1\11\2\3\1\1\5\3"+
    "\1\2\1\12\2\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\1\1\21\2\1\1\16\1\22\1\23\1\24\1\25"+
    "\1\16\1\1\6\16\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\2\1\1\2\1\40"+
    "\1\2\1\0\1\41\2\0\1\42\1\0\5\3\1\0"+
    "\2\3\1\0\1\3\1\0\4\3\1\0\1\3\3\0"+
    "\1\43\1\0\1\44\1\45\1\0\1\16\1\46\1\47"+
    "\1\50\1\51\1\52\2\16\1\53\1\0\1\53\7\16"+
    "\1\54\1\55\1\56\1\57\1\41\2\0\6\3\1\0"+
    "\2\3\1\0\1\3\1\0\4\3\1\0\1\3\1\0"+
    "\1\60\1\43\1\0\2\16\1\0\1\16\1\0\2\16"+
    "\1\0\5\16\1\61\1\0\6\3\1\0\2\3\1\0"+
    "\1\3\1\0\4\3\2\62\1\63\5\0\6\16\1\0"+
    "\1\16\1\0\1\16\1\64\2\65\1\16\1\66\1\0"+
    "\5\16\2\67\2\70\4\3\1\0\1\3\1\71\1\0"+
    "\1\3\1\0\1\3\1\72\1\3\1\73\6\0\7\16"+
    "\1\0\1\16\1\0\2\16\2\74\5\16\2\3\1\75"+
    "\1\3\2\76\1\0\1\3\2\77\1\100\1\101\7\0"+
    "\10\16\1\0\3\16\1\0\1\16\1\0\1\16\1\0"+
    "\3\16\1\0\4\16\1\102\1\3\1\103\2\104\1\0"+
    "\1\105\1\0\1\106\3\0\1\16\1\105\1\16\1\106"+
    "\4\16\1\0\4\16\1\0\1\16\1\0\1\16\2\107"+
    "\1\16\1\110\1\0\1\16\1\111\2\16\1\112\1\113"+
    "\2\0\1\114\1\115\1\116\2\16\1\114\1\115\1\116"+
    "\1\16\1\0\4\16\1\0\1\16\2\117\1\16\1\0"+
    "\1\16\1\120\1\121\2\0\3\16\1\0\4\16\1\0"+
    "\2\16\1\0\1\16\2\0\3\16\1\0\1\16\1\122"+
    "\1\123\1\16\2\124\1\0\1\16\1\0\1\16\2\0"+
    "\3\16\2\125\1\126\1\127\1\0\1\16\1\0\1\16"+
    "\1\130\1\0\1\130\1\16\1\131\2\132\1\0\1\16"+
    "\2\133\2\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[414];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u0138\0\u023c\0\u0270\0\u02a4\0\u0138"+
    "\0\u0138\0\u0138\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc"+
    "\0\u0410\0\u0444\0\u0138\0\u0478\0\u04ac\0\u04e0\0\u0138\0\u0514"+
    "\0\u0548\0\u057c\0\u0138\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680"+
    "\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820"+
    "\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0138\0\u0138\0\u0138\0\u0138"+
    "\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138\0\u0924\0\u0958"+
    "\0\u098c\0\u0138\0\u09c0\0\u0208\0\u0138\0\u09f4\0\u0a28\0\u0138"+
    "\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8"+
    "\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68"+
    "\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u05b0\0\u0138\0\u0e6c\0\u0138"+
    "\0\u0138\0\u0ea0\0\u0ed4\0\u0138\0\u0138\0\u0138\0\u0138\0\u0138"+
    "\0\u0f08\0\u0f3c\0\u0138\0\u0f70\0\u0548\0\u0fa4\0\u0fd8\0\u100c"+
    "\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u0138\0\u0138\0\u0138\0\u0138"+
    "\0\u0208\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248"+
    "\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8"+
    "\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u0e38\0\u05b0"+
    "\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0"+
    "\0\u16f4\0\u1728\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u0138\0\u182c"+
    "\0\u1860\0\u1894\0\u18c8\0\u18fc\0\u1930\0\u1964\0\u1998\0\u19cc"+
    "\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c"+
    "\0\u0138\0\u01a0\0\u0138\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70"+
    "\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10"+
    "\0\u1e44\0\u1e78\0\u0548\0\u0138\0\u0548\0\u1eac\0\u0548\0\u1ee0"+
    "\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0\0\u1fe4\0\u0138\0\u01a0\0\u0138"+
    "\0\u01a0\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u01a0"+
    "\0\u2150\0\u2184\0\u21b8\0\u21ec\0\u01a0\0\u2220\0\u01a0\0\u2254"+
    "\0\u2288\0\u22bc\0\u22f0\0\u2324\0\u2358\0\u238c\0\u23c0\0\u23f4"+
    "\0\u2428\0\u245c\0\u2490\0\u24c4\0\u24f8\0\u252c\0\u2560\0\u2594"+
    "\0\u25c8\0\u0138\0\u0548\0\u25fc\0\u2630\0\u2664\0\u2698\0\u26cc"+
    "\0\u2700\0\u2734\0\u01a0\0\u2768\0\u0138\0\u01a0\0\u279c\0\u27d0"+
    "\0\u0138\0\u01a0\0\u01a0\0\u01a0\0\u2804\0\u2838\0\u286c\0\u28a0"+
    "\0\u28d4\0\u2908\0\u293c\0\u2970\0\u29a4\0\u29d8\0\u2a0c\0\u2a40"+
    "\0\u2a74\0\u2aa8\0\u2adc\0\u2b10\0\u2b44\0\u2b78\0\u2bac\0\u2be0"+
    "\0\u2c14\0\u2c48\0\u2c7c\0\u2cb0\0\u2ce4\0\u2d18\0\u2d4c\0\u2d80"+
    "\0\u2db4\0\u2de8\0\u2e1c\0\u2e50\0\u2e84\0\u2eb8\0\u01a0\0\u0138"+
    "\0\u01a0\0\u2eec\0\u0138\0\u2f20\0\u0138\0\u2f54\0\u2f88\0\u2fbc"+
    "\0\u2ff0\0\u0548\0\u3024\0\u0548\0\u3058\0\u308c\0\u30c0\0\u30f4"+
    "\0\u3128\0\u315c\0\u3190\0\u31c4\0\u31f8\0\u322c\0\u3260\0\u3294"+
    "\0\u32c8\0\u0138\0\u0548\0\u32fc\0\u0548\0\u3330\0\u3364\0\u0548"+
    "\0\u3398\0\u33cc\0\u01a0\0\u01a0\0\u3400\0\u3434\0\u0138\0\u0138"+
    "\0\u0138\0\u3468\0\u349c\0\u0548\0\u0548\0\u0548\0\u34d0\0\u3504"+
    "\0\u3538\0\u356c\0\u35a0\0\u35d4\0\u3608\0\u363c\0\u0138\0\u0548"+
    "\0\u3670\0\u36a4\0\u36d8\0\u0548\0\u0548\0\u370c\0\u3740\0\u3774"+
    "\0\u37a8\0\u37dc\0\u3810\0\u3844\0\u3878\0\u38ac\0\u38e0\0\u3914"+
    "\0\u3948\0\u397c\0\u39b0\0\u39e4\0\u3a18\0\u3a4c\0\u3a80\0\u3ab4"+
    "\0\u3ae8\0\u3b1c\0\u3b50\0\u0548\0\u0548\0\u3b84\0\u0138\0\u0548"+
    "\0\u3bb8\0\u3bec\0\u3c20\0\u3c54\0\u3c88\0\u3cbc\0\u3cf0\0\u3d24"+
    "\0\u3d58\0\u0138\0\u0548\0\u0548\0\u0548\0\u3d8c\0\u3dc0\0\u3df4"+
    "\0\u3e28\0\u0138\0\u3e5c\0\u0548\0\u3e90\0\u0548\0\u0138\0\u0548"+
    "\0\u3ec4\0\u3ef8\0\u0138\0\u0548\0\u0138\0\u0548";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[414];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\7\1\12\1\7\1\13\1\14"+
    "\1\7\1\15\1\7\1\11\1\16\1\17\1\7\1\20"+
    "\1\21\1\22\1\23\2\11\1\24\1\25\1\26\1\11"+
    "\1\27\1\30\1\11\1\31\2\11\1\32\4\11\1\10"+
    "\1\0\15\7\1\11\1\33\1\34\1\35\1\33\1\36"+
    "\2\33\1\37\1\33\1\40\1\33\1\35\1\33\1\35"+
    "\4\33\4\35\1\33\15\35\1\34\1\0\15\33\1\35"+
    "\1\7\1\10\1\41\1\7\1\42\1\43\1\44\1\14"+
    "\1\7\1\45\1\46\1\41\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\3\41\1\56\1\57\2\41\1\60"+
    "\1\61\1\62\2\41\1\63\2\41\1\64\1\41\1\10"+
    "\1\0\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\7\1\41\7\33"+
    "\1\0\6\33\1\101\25\33\2\0\25\33\1\102\34\33"+
    "\2\0\17\33\1\10\5\33\1\14\34\33\1\10\1\0"+
    "\1\103\15\33\65\0\1\10\42\0\1\10\21\0\3\11"+
    "\6\0\1\11\1\0\1\11\4\0\4\11\1\0\15\11"+
    "\17\0\1\11\4\0\1\12\57\0\6\104\1\105\1\0"+
    "\1\106\53\104\12\0\1\107\3\0\1\110\75\0\1\111"+
    "\35\0\3\11\6\0\1\11\1\0\1\11\4\0\4\11"+
    "\1\0\1\11\1\112\13\11\17\0\1\11\2\0\3\11"+
    "\6\0\1\11\1\0\1\11\4\0\1\11\1\113\2\11"+
    "\1\0\1\11\1\114\4\11\1\115\6\11\17\0\1\11"+
    "\2\0\3\11\6\0\1\11\1\0\1\11\4\0\4\11"+
    "\1\0\1\11\1\116\13\11\17\0\1\11\24\0\1\117"+
    "\41\0\3\11\6\0\1\11\1\0\1\11\4\0\2\11"+
    "\1\120\1\11\1\0\15\11\17\0\1\11\2\0\3\11"+
    "\6\0\1\11\1\0\1\11\4\0\1\11\1\121\2\11"+
    "\1\0\15\11\17\0\1\11\2\0\3\11\6\0\1\11"+
    "\1\122\1\123\4\0\4\11\1\0\15\11\17\0\1\11"+
    "\2\0\3\11\6\0\1\11\1\0\1\11\4\0\4\11"+
    "\1\124\1\125\1\126\1\11\1\127\11\11\17\0\1\11"+
    "\2\0\3\11\6\0\1\11\1\0\1\11\4\0\1\11"+
    "\1\130\2\11\1\131\1\132\14\11\17\0\1\11\1\0"+
    "\1\34\42\0\1\34\21\0\3\35\6\0\1\35\1\0"+
    "\1\35\4\0\4\35\1\0\15\35\17\0\1\35\4\0"+
    "\1\36\71\0\1\133\3\0\1\110\47\0\3\41\6\0"+
    "\1\41\1\0\1\41\4\0\4\41\1\0\15\41\17\0"+
    "\1\41\4\0\1\42\1\134\56\0\6\135\1\136\1\0"+
    "\1\137\53\135\21\0\1\140\62\0\1\141\75\0\1\142"+
    "\33\0\3\41\6\0\1\41\1\0\1\41\4\0\4\41"+
    "\1\0\3\41\1\143\11\41\17\0\1\41\21\0\1\144"+
    "\61\0\1\145\26\0\1\146\36\0\1\147\63\0\1\150"+
    "\44\0\3\41\6\0\1\41\1\0\1\41\4\0\4\41"+
    "\1\0\4\41\1\151\2\41\1\152\5\41\17\0\1\41"+
    "\37\0\1\153\1\154\25\0\3\41\6\0\1\41\1\0"+
    "\1\41\4\0\4\41\1\0\10\41\1\155\1\156\3\41"+
    "\17\0\1\41\2\0\3\41\6\0\1\41\1\0\1\41"+
    "\4\0\1\157\3\41\1\0\7\41\1\160\5\41\17\0"+
    "\1\41\2\0\3\41\6\0\1\41\1\0\1\41\4\0"+
    "\4\41\1\0\3\41\1\161\11\41\17\0\1\41\2\0"+
    "\3\41\6\0\1\41\1\0\1\41\4\0\4\41\1\0"+
    "\4\41\1\162\10\41\17\0\1\41\2\0\3\41\6\0"+
    "\1\41\1\0\1\41\4\0\4\41\1\0\1\41\1\163"+
    "\13\41\17\0\1\41\2\0\3\41\6\0\1\41\1\0"+
    "\1\41\4\0\4\41\1\0\3\41\1\164\11\41\17\0"+
    "\1\41\60\0\1\165\64\0\1\166\22\0\1\167\62\0"+
    "\1\170\44\0\6\104\1\171\1\0\1\106\53\104\13\0"+
    "\1\172\106\0\1\173\27\0\3\11\6\0\1\11\1\0"+
    "\1\11\4\0\4\11\1\0\7\11\1\174\5\11\17\0"+
    "\1\11\2\0\3\11\6\0\1\11\1\0\1\11\4\0"+
    "\2\11\1\175\1\11\1\0\7\11\1\176\5\11\17\0"+
    "\1\11\2\0\3\11\6\0\1\11\1\0\1\11\4\0"+
    "\4\11\1\0\2\11\1\177\12\11\17\0\1\11\2\0"+
    "\3\11\6\0\1\11\1\0\1\11\4\0\4\11\1\0"+
    "\3\11\1\200\11\11\17\0\1\11\2\0\3\11\6\0"+
    "\1\11\1\0\1\11\4\0\4\11\1\0\4\11\1\201"+
    "\10\11\17\0\1\11\30\0\1\202\35\0\3\11\6\0"+
    "\1\11\1\0\1\11\4\0\4\11\1\0\1\11\1\203"+
    "\13\11\17\0\1\11\2\0\3\11\6\0\1\11\1\0"+
    "\1\11\4\0\4\11\1\0\5\11\1\204\7\11\17\0"+
    "\1\11\25\0\1\205\40\0\3\11\6\0\1\11\1\0"+
    "\1\11\4\0\3\11\1\206\1\0\15\11\17\0\1\11"+
    "\34\0\1\207\31\0\3\11\6\0\1\11\1\0\1\11"+
    "\4\0\4\11\1\0\5\11\1\210\7\11\17\0\1\11"+
    "\2\0\3\11\6\0\1\11\1\0\1\11\4\0\4\11"+
    "\1\0\2\11\1\211\12\11\17\0\1\11\2\0\3\11"+
    "\6\0\1\11\1\0\1\11\4\0\4\11\1\0\14\11"+
    "\1\212\17\0\1\11\2\0\3\11\6\0\1\11\1\0"+
    "\1\11\4\0\4\11\1\0\11\11\1\213\3\11\17\0"+
    "\1\11\36\0\1\214\27\0\3\11\6\0\1\11\1\0"+
    "\1\11\4\0\4\11\1\0\7\11\1\215\5\11\17\0"+
    "\1\11\13\0\1\216\54\0\1\217\57\0\6\135\1\220"+
    "\1\0\1\137\53\135\34\0\1\221\31\0\3\41\6\0"+
    "\1\41\1\0\1\41\4\0\4\41\1\0\5\41\1\222"+
    "\7\41\17\0\1\41\2\0\3\41\6\0\1\41\1\0"+
    "\1\41\4\0\4\41\1\0\3\41\1\223\11\41\17\0"+
    "\1\41\2\0\3\41\6\0\1\41\1\0\1\41\4\0"+
    "\4\41\1\224\1\225\14\41\17\0\1\41\14\0\2\226"+
    "\50\0\3\41\6\0\1\41\1\226\1\227\4\0\4\41"+
    "\1\0\15\41\17\0\1\41\2\0\3\41\6\0\1\230"+
    "\1\0\1\41\4\0\4\41\1\0\15\41\17\0\1\41"+
    "\2\0\3\41\6\0\1\41\1\231\1\232\4\0\4\41"+
    "\1\0\15\41\17\0\1\41\2\0\3\41\6\0\1\41"+
    "\1\0\1\41\4\0\3\41\1\233\1\0\15\41\17\0"+
    "\1\41\2\0\3\41\6\0\1\41\1\0\1\41\4\0"+
    "\4\41\1\0\6\41\1\234\6\41\17\0\1\41\2\0"+
    "\3\41\6\0\1\41\1\0\1\41\4\0\4\41\1\0"+
    "\7\41\1\235\5\41\17\0\1\41\2\0\3\41\6\0"+
    "\1\41\1\0\1\41\4\0\4\41\1\0\5\41\1\236"+
    "\7\41\17\0\1\41\14\0\2\237\102\0\1\240\31\0"+
    "\3\11\6\0\1\11\1\0\1\11\4\0\4\11\1\0"+
    "\5\11\1\241\7\11\17\0\1\11\2\0\3\11\6\0"+
    "\1\11\1\0\1\11\4\0\3\11\1\242\1\0\15\11"+
    "\17\0\1\11\2\0\3\11\6\0\1\11\1\0\1\11"+
    "\4\0\4\11\1\0\6\11\1\243\6\11\17\0\1\11"+
    "\2\0\3\11\6\0\1\11\1\0\1\11\4\0\4\11"+
    "\1\0\3\11\1\244\11\11\17\0\1\11\2\0\3\11"+
    "\6\0\1\11\1\0\1\11\4\0\4\11\1\0\4\11"+
    "\1\245\10\11\17\0\1\11\2\0\3\11\6\0\1\11"+
    "\1\0\1\11\4\0\4\11\1\0\4\11\1\246\10\11"+
    "\17\0\1\11\42\0\1\247\23\0\3\11\6\0\1\11"+
    "\1\0\1\11\4\0\4\11\1\0\13\11\1\250\1\11"+
    "\17\0\1\11\2\0\3\11\6\0\1\11\1\0\1\11"+
    "\4\0\1\11\1\251\2\11\1\0\15\11\17\0\1\11"+
    "\30\0\1\252\35\0\3\11\6\0\1\11\1\0\1\11"+
    "\4\0\4\11\1\0\1\11\1\253\13\11\17\0\1\11"+
    "\35\0\1\254\30\0\3\11\6\0\1\11\1\0\1\11"+
    "\4\0\4\11\1\0\6\11\1\255\6\11\17\0\1\11"+
    "\2\0\3\11\6\0\1\11\1\0\1\11\4\0\4\11"+
    "\1\0\7\11\1\256\5\11\17\0\1\11\2\0\3\11"+
    "\6\0\1\11\1\0\1\11\4\0\4\11\1\0\5\11"+
    "\1\257\7\11\17\0\1\11\2\0\3\11\6\0\1\11"+
    "\1\0\1\11\4\0\4\11\1\0\12\11\1\260\2\11"+
    "\17\0\1\11\30\0\1\261\35\0\3\11\6\0\1\11"+
    "\1\0\1\11\4\0\4\11\1\0\1\11\1\262\13\11"+
    "\17\0\1\11\14\0\2\263\70\0\1\264\2\0\1\265"+
    "\2\0\1\266\1\267\2\0\1\270\31\0\3\41\6\0"+
    "\1\41\1\0\1\41\4\0\1\271\2\41\1\272\1\0"+
    "\1\41\1\273\1\274\2\41\1\275\7\41\17\0\1\41"+
    "\2\0\3\41\6\0\1\41\1\0\1\41\4\0\4\41"+
    "\1\0\1\41\1\276\13\41\17\0\1\41\22\0\1\277"+
    "\43\0\3\41\6\0\1\41\1\0\1\41\4\0\1\300"+
    "\3\41\1\0\15\41\17\0\1\41\32\0\1\301\33\0"+
    "\3\41\6\0\1\41\1\0\1\41\4\0\4\41\1\0"+
    "\3\41\1\302\11\41\17\0\1\41\2\0\3\41\6\0"+
    "\1\41\1\0\1\41\4\0\1\41\1\303\2\41\1\0"+
    "\15\41\17\0\1\41\32\0\1\304\33\0\3\41\6\0"+
    "\1\41\1\0\1\41\4\0\4\41\1\0\3\41\1\305"+
    "\11\41\17\0\1\41\2\0\3\41\6\0\1\41\1\0"+
    "\1\41\4\0\4\41\1\0\3\41\1\306\11\41\17\0"+
    "\1\41\2\0\3\41\6\0\1\41\1\0\1\41\4\0"+
    "\4\41\1\0\3\41\1\307\11\41\17\0\1\41\2\0"+
    "\3\41\6\0\1\41\1\310\1\311\4\0\4\41\1\0"+
    "\15\41\17\0\1\41\2\0\3\41\6\0\1\41\1\0"+
    "\1\41\4\0\1\312\2\41\1\313\1\0\1\41\1\314"+
    "\3\41\1\315\7\41\17\0\1\41\23\0\1\316\42\0"+
    "\3\11\6\0\1\11\1\0\1\11\4\0\1\11\1\317"+
    "\2\11\1\0\15\11\17\0\1\11\2\0\3\11\6\0"+
    "\1\11\1\0\1\11\4\0\4\11\1\320\1\321\14\11"+
    "\17\0\1\11\2\0\3\11\6\0\1\11\1\0\1\11"+
    "\4\0\2\11\1\322\1\11\1\0\15\11\17\0\1\11"+
    "\2\0\3\11\6\0\1\11\1\0\1\11\4\0\1\323"+
    "\3\11\1\0\15\11\17\0\1\11\2\0\3\11\6\0"+
    "\1\11\1\0\1\11\4\0\3\11\1\324\1\0\15\11"+
    "\17\0\1\11\2\0\3\11\6\0\1\11\1\0\1\11"+
    "\4\0\4\11\1\0\1\11\1\325\13\11\17\0\1\11"+
    "\32\0\1\326\33\0\3\11\6\0\1\11\1\0\1\11"+
    "\4\0\4\11\1\0\3\11\1\327\11\11\17\0\1\11"+
    "\2\0\3\11\6\0\1\11\1\0\1\11\4\0\4\11"+
    "\1\0\11\11\1\330\3\11\17\0\1\11\22\0\1\331"+
    "\43\0\3\11\6\0\1\11\1\0\1\11\4\0\1\332"+
    "\3\11\1\0\15\11\17\0\1\11\36\0\1\333\27\0"+
    "\3\11\6\0\1\11\1\0\1\11\4\0\4\11\1\0"+
    "\7\11\1\334\5\11\17\0\1\11\2\0\3\11\6\0"+
    "\1\11\1\0\1\11\4\0\4\11\1\0\1\11\1\335"+
    "\13\11\17\0\1\11\2\0\3\11\6\0\1\11\1\0"+
    "\1\11\4\0\1\11\1\336\2\11\1\0\15\11\17\0"+
    "\1\11\2\0\3\11\6\0\1\11\1\0\1\11\4\0"+
    "\1\11\1\337\2\11\1\0\15\11\17\0\1\11\23\0"+
    "\1\340\70\0\1\341\71\0\1\342\1\0\1\343\46\0"+
    "\1\344\72\0\1\345\33\0\3\41\6\0\1\41\1\0"+
    "\1\41\4\0\1\41\1\346\2\41\1\0\15\41\17\0"+
    "\1\41\2\0\3\41\6\0\1\41\1\0\1\41\4\0"+
    "\4\41\1\0\1\41\1\347\13\41\17\0\1\41\2\0"+
    "\3\41\6\0\1\41\1\0\1\41\4\0\4\41\1\0"+
    "\7\41\1\350\1\41\1\351\3\41\17\0\1\41\2\0"+
    "\3\41\6\0\1\41\1\0\1\41\4\0\1\41\1\352"+
    "\2\41\1\0\15\41\17\0\1\41\2\0\3\41\6\0"+
    "\1\41\1\0\1\41\4\0\4\41\1\0\3\41\1\353"+
    "\11\41\17\0\1\41\2\0\3\41\6\0\1\41\1\0"+
    "\1\41\4\0\4\41\1\0\4\41\1\354\10\41\17\0"+
    "\1\41\62\0\2\355\2\0\3\41\6\0\1\41\1\0"+
    "\1\41\4\0\4\41\1\0\15\41\16\0\1\355\1\356"+
    "\33\0\1\357\32\0\3\41\6\0\1\41\1\0\1\41"+
    "\4\0\4\41\1\0\4\41\1\360\10\41\17\0\1\41"+
    "\2\0\3\41\6\0\1\41\1\0\1\41\4\0\4\41"+
    "\1\0\5\41\1\361\7\41\17\0\1\41\32\0\1\362"+
    "\33\0\3\41\6\0\1\41\1\0\1\41\4\0\4\41"+
    "\1\0\3\41\1\363\11\41\17\0\1\41\2\0\3\41"+
    "\6\0\1\41\1\0\1\41\4\0\1\41\1\364\2\41"+
    "\1\0\15\41\17\0\1\41\2\0\3\41\6\0\1\41"+
    "\1\0\1\41\4\0\4\41\1\0\1\41\1\365\13\41"+
    "\17\0\1\41\2\0\3\41\6\0\1\41\1\0\1\41"+
    "\4\0\4\41\1\0\7\41\1\366\1\41\1\367\3\41"+
    "\17\0\1\41\2\0\3\41\6\0\1\41\1\0\1\41"+
    "\4\0\4\41\1\0\3\41\1\370\11\41\17\0\1\41"+
    "\2\0\3\11\6\0\1\11\1\0\1\11\4\0\4\11"+
    "\1\0\11\11\1\371\3\11\17\0\1\11\2\0\3\11"+
    "\6\0\1\11\1\0\1\11\4\0\4\11\1\0\3\11"+
    "\1\372\11\11\17\0\1\11\2\0\3\11\6\0\1\11"+
    "\1\0\1\11\4\0\1\11\1\373\2\11\1\0\15\11"+
    "\17\0\1\11\2\0\3\11\6\0\1\11\1\0\1\11"+
    "\4\0\4\11\1\0\10\11\1\374\4\11\17\0\1\11"+
    "\40\0\1\375\25\0\3\11\6\0\1\11\1\0\1\11"+
    "\4\0\4\11\1\0\11\11\1\376\3\11\17\0\1\11"+
    "\26\0\2\377\36\0\3\11\6\0\1\11\1\0\1\11"+
    "\4\0\4\11\1\377\1\u0100\14\11\17\0\1\11\23\0"+
    "\1\u0101\42\0\3\11\6\0\1\11\1\0\1\11\4\0"+
    "\1\11\1\u0102\2\11\1\0\15\11\17\0\1\11\2\0"+
    "\3\11\6\0\1\11\1\0\1\11\4\0\4\11\1\0"+
    "\1\11\1\u0103\1\u0104\12\11\17\0\1\11\40\0\1\u0105"+
    "\57\0\1\u0106\55\0\2\u0107\4\0\1\u0108\51\0\1\u0109"+
    "\74\0\1\u010a\73\0\1\u010b\22\0\3\41\6\0\1\41"+
    "\1\0\1\41\4\0\4\41\1\0\11\41\1\u010c\3\41"+
    "\17\0\1\41\2\0\3\41\6\0\1\41\1\0\1\41"+
    "\4\0\4\41\1\0\5\41\1\u010d\7\41\17\0\1\41"+
    "\2\0\3\41\6\0\1\41\1\0\1\41\4\0\4\41"+
    "\1\u0107\1\u010e\4\41\1\u010f\7\41\17\0\1\41\2\0"+
    "\3\41\6\0\1\41\1\0\1\41\4\0\1\u0110\3\41"+
    "\1\0\15\41\17\0\1\41\2\0\3\41\6\0\1\41"+
    "\1\0\1\41\4\0\4\41\1\0\4\41\1\u0111\10\41"+
    "\17\0\1\41\2\0\3\41\6\0\1\41\1\0\1\41"+
    "\4\0\4\41\1\0\14\41\1\u0112\17\0\1\41\2\0"+
    "\3\41\6\0\1\41\1\0\1\41\4\0\3\41\1\u0113"+
    "\1\u0114\1\u0115\1\41\1\u0116\2\41\1\u0117\7\41\17\0"+
    "\1\41\31\0\1\u0118\34\0\3\41\6\0\1\41\1\0"+
    "\1\41\4\0\4\41\1\0\2\41\1\u0119\12\41\17\0"+
    "\1\41\34\0\1\u011a\31\0\3\41\6\0\1\41\1\0"+
    "\1\41\4\0\4\41\1\0\5\41\1\u011b\7\41\17\0"+
    "\1\41\2\0\3\41\6\0\1\41\1\0\1\41\4\0"+
    "\4\41\1\u011c\1\u011d\14\41\17\0\1\41\2\0\3\41"+
    "\6\0\1\41\1\0\1\41\4\0\4\41\1\0\11\41"+
    "\1\u011e\3\41\17\0\1\41\2\0\3\41\6\0\1\41"+
    "\1\0\1\41\4\0\4\41\1\0\5\41\1\u011f\7\41"+
    "\17\0\1\41\2\0\3\41\6\0\1\41\1\0\1\41"+
    "\4\0\4\41\1\u0120\1\u0121\4\41\1\u0122\7\41\17\0"+
    "\1\41\2\0\3\41\6\0\1\41\1\0\1\41\4\0"+
    "\1\u0123\3\41\1\0\15\41\17\0\1\41\2\0\3\41"+
    "\6\0\1\41\1\0\1\41\4\0\4\41\1\0\14\41"+
    "\1\u0124\17\0\1\41\2\0\3\11\6\0\1\11\1\0"+
    "\1\11\4\0\4\11\1\0\1\11\1\u0125\13\11\17\0"+
    "\1\11\2\0\3\11\6\0\1\11\1\0\1\11\4\0"+
    "\4\11\1\0\4\11\1\u0126\10\11\17\0\1\11\2\0"+
    "\3\11\6\0\1\11\1\0\1\11\4\0\1\11\1\u0127"+
    "\2\11\1\0\15\11\17\0\1\11\23\0\1\u0128\42\0"+
    "\3\11\6\0\1\11\1\0\1\11\4\0\1\11\1\u0129"+
    "\2\11\1\0\15\11\17\0\1\11\34\0\1\u012a\42\0"+
    "\1\u012b\110\0\1\u012c\46\0\1\u012d\53\0\1\u012e\111\0"+
    "\1\u012f\56\0\1\u0130\31\0\3\41\6\0\1\41\1\0"+
    "\1\41\4\0\4\41\1\0\5\41\1\u0131\7\41\17\0"+
    "\1\41\2\0\3\41\6\0\1\u0132\1\0\1\41\4\0"+
    "\4\41\1\0\15\41\17\0\1\41\2\0\3\41\6\0"+
    "\1\41\1\0\1\41\4\0\4\41\1\0\11\41\1\u0133"+
    "\3\41\17\0\1\41\2\0\3\41\6\0\1\41\1\0"+
    "\1\41\4\0\1\41\1\u0134\2\41\1\0\15\41\17\0"+
    "\1\41\2\0\3\41\6\0\1\u0135\1\0\1\41\4\0"+
    "\4\41\1\0\15\41\17\0\1\41\2\0\3\41\6\0"+
    "\1\41\1\0\1\41\4\0\4\41\1\0\12\41\1\u0136"+
    "\2\41\17\0\1\41\2\0\3\41\6\0\1\41\1\0"+
    "\1\41\4\0\4\41\1\0\5\41\1\u0137\7\41\17\0"+
    "\1\41\2\0\3\41\6\0\1\41\1\0\1\41\4\0"+
    "\4\41\1\0\1\41\1\u0138\13\41\17\0\1\41\24\0"+
    "\1\u0139\41\0\3\41\6\0\1\41\1\0\1\41\4\0"+
    "\2\41\1\u013a\1\41\1\0\15\41\17\0\1\41\2\0"+
    "\3\41\6\0\1\41\1\0\1\41\4\0\1\41\1\u013b"+
    "\2\41\1\0\15\41\17\0\1\41\2\0\3\41\6\0"+
    "\1\41\1\0\1\41\4\0\4\41\1\0\1\41\1\u013c"+
    "\1\41\1\u013d\11\41\17\0\1\41\23\0\1\u013e\42\0"+
    "\3\41\6\0\1\41\1\0\1\41\4\0\1\41\1\u013f"+
    "\2\41\1\0\15\41\17\0\1\41\30\0\1\u0140\35\0"+
    "\3\41\6\0\1\41\1\0\1\41\4\0\4\41\1\0"+
    "\1\41\1\u0141\13\41\17\0\1\41\33\0\1\u0142\32\0"+
    "\3\41\6\0\1\41\1\0\1\41\4\0\4\41\1\0"+
    "\4\41\1\u0143\10\41\17\0\1\41\2\0\3\41\6\0"+
    "\1\41\1\0\1\41\4\0\4\41\1\0\5\41\1\u0144"+
    "\7\41\17\0\1\41\2\0\3\41\6\0\1\u0145\1\0"+
    "\1\41\4\0\4\41\1\0\15\41\17\0\1\41\40\0"+
    "\1\u0146\25\0\3\41\6\0\1\41\1\0\1\41\4\0"+
    "\4\41\1\0\11\41\1\u0147\3\41\17\0\1\41\2\0"+
    "\3\41\6\0\1\41\1\0\1\41\4\0\1\41\1\u0148"+
    "\2\41\1\0\15\41\17\0\1\41\2\0\3\41\6\0"+
    "\1\u0149\1\0\1\41\4\0\4\41\1\0\15\41\17\0"+
    "\1\41\2\0\3\41\6\0\1\41\1\0\1\41\4\0"+
    "\4\41\1\0\5\41\1\u014a\7\41\17\0\1\41\2\0"+
    "\3\11\6\0\1\11\1\0\1\11\4\0\1\u014b\3\11"+
    "\1\0\15\11\17\0\1\11\2\0\3\11\6\0\1\11"+
    "\1\0\1\11\4\0\4\11\1\0\1\11\1\u014c\13\11"+
    "\17\0\1\11\32\0\1\u014d\63\0\1\u014e\54\0\1\u014f"+
    "\72\0\1\u0150\54\0\1\u0151\42\0\3\41\6\0\1\41"+
    "\1\0\1\41\4\0\4\41\1\0\3\41\1\u0152\11\41"+
    "\17\0\1\41\2\0\3\41\6\0\1\41\1\0\1\41"+
    "\4\0\4\41\1\0\3\41\1\u0153\11\41\17\0\1\41"+
    "\2\0\3\41\6\0\1\41\1\0\1\41\4\0\1\41"+
    "\1\u0154\2\41\1\0\15\41\17\0\1\41\2\0\3\41"+
    "\6\0\1\41\1\0\1\41\4\0\4\41\1\0\3\41"+
    "\1\u0155\11\41\17\0\1\41\2\0\3\41\6\0\1\41"+
    "\1\0\1\41\4\0\1\41\1\u0156\2\41\1\0\15\41"+
    "\17\0\1\41\2\0\3\41\6\0\1\41\1\0\1\41"+
    "\4\0\4\41\1\0\4\41\1\u0157\10\41\17\0\1\41"+
    "\30\0\1\u0158\35\0\3\41\6\0\1\41\1\0\1\41"+
    "\4\0\4\41\1\0\1\41\1\u0159\13\41\17\0\1\41"+
    "\2\0\3\41\6\0\1\41\1\0\1\41\4\0\4\41"+
    "\1\0\5\41\1\u015a\7\41\17\0\1\41\2\0\3\41"+
    "\6\0\1\41\1\0\1\41\4\0\4\41\1\0\2\41"+
    "\1\u015b\12\41\17\0\1\41\2\0\3\41\6\0\1\41"+
    "\1\0\1\41\4\0\4\41\1\0\14\41\1\u015c\17\0"+
    "\1\41\34\0\1\u015d\31\0\3\41\6\0\1\41\1\0"+
    "\1\41\4\0\4\41\1\0\5\41\1\u015e\7\41\17\0"+
    "\1\41\33\0\1\u015f\32\0\3\41\6\0\1\41\1\0"+
    "\1\41\4\0\4\41\1\0\4\41\1\u0160\10\41\17\0"+
    "\1\41\2\0\3\41\6\0\1\41\1\0\1\41\4\0"+
    "\4\41\1\0\3\41\1\u0161\11\41\17\0\1\41\32\0"+
    "\1\u0162\33\0\3\41\6\0\1\41\1\0\1\41\4\0"+
    "\4\41\1\0\3\41\1\u0163\11\41\17\0\1\41\2\0"+
    "\3\41\6\0\1\41\1\0\1\41\4\0\1\41\1\u0164"+
    "\2\41\1\0\15\41\17\0\1\41\2\0\3\41\6\0"+
    "\1\41\1\0\1\41\4\0\1\41\1\u0165\2\41\1\0"+
    "\15\41\17\0\1\41\40\0\1\u0166\53\0\1\u0167\35\0"+
    "\3\41\6\0\1\41\1\0\1\41\4\0\4\41\1\0"+
    "\11\41\1\u0168\3\41\17\0\1\41\2\0\3\41\6\0"+
    "\1\41\1\0\1\41\4\0\4\41\1\0\1\41\1\u0169"+
    "\13\41\17\0\1\41\2\0\3\41\6\0\1\41\1\0"+
    "\1\41\4\0\4\41\1\0\4\41\1\u016a\10\41\17\0"+
    "\1\41\42\0\1\u016b\23\0\3\41\6\0\1\41\1\0"+
    "\1\41\4\0\4\41\1\0\13\41\1\u016c\1\41\17\0"+
    "\1\41\2\0\3\41\6\0\1\41\1\0\1\41\4\0"+
    "\1\41\1\u016d\2\41\1\0\15\41\17\0\1\41\2\0"+
    "\3\41\6\0\1\41\1\0\1\41\4\0\4\41\1\0"+
    "\7\41\1\u016e\5\41\17\0\1\41\2\0\3\41\6\0"+
    "\1\41\1\0\1\41\4\0\4\41\1\0\5\41\1\u016f"+
    "\7\41\17\0\1\41\23\0\1\u0170\42\0\3\41\6\0"+
    "\1\41\1\0\1\41\4\0\1\41\1\u0171\2\41\1\0"+
    "\15\41\17\0\1\41\2\0\3\41\6\0\1\41\1\0"+
    "\1\41\4\0\4\41\1\0\11\41\1\u0172\3\41\17\0"+
    "\1\41\30\0\1\u0173\35\0\3\41\6\0\1\41\1\0"+
    "\1\41\4\0\4\41\1\0\1\41\1\u0174\13\41\17\0"+
    "\1\41\26\0\2\u0175\56\0\1\u0176\43\0\3\41\6\0"+
    "\1\41\1\0\1\41\4\0\4\41\1\u0175\1\u0177\14\41"+
    "\17\0\1\41\2\0\3\41\6\0\1\41\1\0\1\41"+
    "\4\0\1\u0178\3\41\1\0\15\41\17\0\1\41\2\0"+
    "\3\41\6\0\1\41\1\0\1\41\4\0\4\41\1\0"+
    "\1\41\1\u0179\13\41\17\0\1\41\32\0\1\u017a\33\0"+
    "\3\41\6\0\1\41\1\0\1\41\4\0\4\41\1\0"+
    "\3\41\1\u017b\11\41\17\0\1\41\2\0\3\41\6\0"+
    "\1\41\1\0\1\41\4\0\4\41\1\0\11\41\1\u017c"+
    "\3\41\17\0\1\41\2\0\3\41\6\0\1\41\1\0"+
    "\1\41\4\0\4\41\1\0\1\41\1\u017d\13\41\17\0"+
    "\1\41\2\0\3\41\6\0\1\41\1\0\1\41\4\0"+
    "\1\41\1\u017e\2\41\1\0\15\41\17\0\1\41\40\0"+
    "\1\u017f\25\0\3\41\6\0\1\41\1\0\1\41\4\0"+
    "\4\41\1\0\11\41\1\u0180\3\41\17\0\1\41\2\0"+
    "\3\41\6\0\1\41\1\0\1\41\4\0\4\41\1\u0181"+
    "\1\u0182\14\41\17\0\1\41\22\0\1\u0183\43\0\3\41"+
    "\6\0\1\41\1\0\1\41\4\0\1\u0184\3\41\1\0"+
    "\15\41\17\0\1\41\41\0\1\u0185\50\0\2\u0186\36\0"+
    "\3\41\6\0\1\41\1\0\1\41\4\0\4\41\1\0"+
    "\12\41\1\u0187\2\41\17\0\1\41\2\0\3\41\6\0"+
    "\1\41\1\0\1\41\4\0\4\41\1\u0186\1\u0188\14\41"+
    "\17\0\1\41\2\0\3\41\6\0\1\41\1\0\1\41"+
    "\4\0\4\41\1\0\10\41\1\u0189\4\41\17\0\1\41"+
    "\40\0\1\u018a\25\0\3\41\6\0\1\41\1\0\1\41"+
    "\4\0\4\41\1\0\11\41\1\u018b\3\41\17\0\1\41"+
    "\2\0\3\41\6\0\1\41\1\0\1\41\4\0\4\41"+
    "\1\0\1\41\1\u018c\1\u018d\12\41\17\0\1\41\41\0"+
    "\1\u018e\24\0\3\41\6\0\1\41\1\0\1\41\4\0"+
    "\4\41\1\0\12\41\1\u018f\2\41\17\0\1\41\26\0"+
    "\2\u0190\36\0\3\41\6\0\1\41\1\0\1\41\4\0"+
    "\4\41\1\u0190\1\u0191\14\41\17\0\1\41\23\0\1\u0192"+
    "\63\0\1\u0193\42\0\3\41\6\0\1\41\1\0\1\41"+
    "\4\0\1\41\1\u0194\2\41\1\0\15\41\17\0\1\41"+
    "\2\0\3\41\6\0\1\41\1\0\1\41\4\0\1\41"+
    "\1\u0195\2\41\1\0\15\41\17\0\1\41\2\0\3\41"+
    "\6\0\1\41\1\0\1\41\4\0\1\41\1\u0196\2\41"+
    "\1\0\15\41\17\0\1\41\23\0\1\u0197\42\0\3\41"+
    "\6\0\1\41\1\0\1\41\4\0\1\41\1\u0198\2\41"+
    "\1\0\15\41\17\0\1\41\23\0\1\u0199\42\0\3\41"+
    "\6\0\1\41\1\0\1\41\4\0\1\41\1\u019a\2\41"+
    "\1\0\15\41\17\0\1\41\40\0\1\u019b\25\0\3\41"+
    "\6\0\1\41\1\0\1\41\4\0\4\41\1\0\11\41"+
    "\1\u019c\3\41\17\0\1\41\40\0\1\u019d\25\0\3\41"+
    "\6\0\1\41\1\0\1\41\4\0\4\41\1\0\11\41"+
    "\1\u019e\3\41\17\0\1\41";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16172];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\4\1\1\11\3\1\3\11\10\1\1\11"+
    "\3\1\1\11\3\1\1\11\21\1\12\11\3\1\1\11"+
    "\1\1\1\0\1\11\2\0\1\11\1\0\5\1\1\0"+
    "\2\1\1\0\1\1\1\0\4\1\1\0\1\1\3\0"+
    "\1\11\1\0\2\11\1\0\1\1\5\11\2\1\1\11"+
    "\1\0\10\1\4\11\1\1\2\0\6\1\1\0\2\1"+
    "\1\0\1\1\1\0\4\1\1\0\1\1\1\0\2\1"+
    "\1\0\2\1\1\0\1\1\1\0\2\1\1\0\5\1"+
    "\1\11\1\0\6\1\1\0\2\1\1\0\1\1\1\0"+
    "\4\1\1\11\1\1\1\11\5\0\6\1\1\0\1\1"+
    "\1\0\2\1\1\11\3\1\1\0\5\1\1\11\1\1"+
    "\1\11\5\1\1\0\2\1\1\0\1\1\1\0\4\1"+
    "\6\0\7\1\1\0\1\1\1\0\2\1\1\11\12\1"+
    "\1\11\1\1\1\0\1\1\1\11\3\1\7\0\10\1"+
    "\1\0\3\1\1\0\1\1\1\0\1\1\1\0\3\1"+
    "\1\0\7\1\1\11\1\1\1\0\1\11\1\0\1\11"+
    "\3\0\10\1\1\0\4\1\1\0\1\1\1\0\1\1"+
    "\1\11\3\1\1\0\6\1\2\0\3\11\6\1\1\0"+
    "\4\1\1\0\1\1\1\11\2\1\1\0\3\1\2\0"+
    "\3\1\1\0\4\1\1\0\2\1\1\0\1\1\2\0"+
    "\3\1\1\0\4\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\2\0\3\1\1\11\3\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\0\3\1\1\11\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[414];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer cadenaTemp = new StringBuffer();
    boolean entro = false;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
      yyline = 0; 
    yychar = 0; 
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.err.println("Este es un error lexico: "+yytext()+", en la linea: "+yyline+", en la columna: "+yychar);
            } 
            // fall through
          case 93: break;
          case 2: 
            { 
            } 
            // fall through
          case 94: break;
          case 3: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Id")); return new Symbol(sym.ID,yyline,yychar,yytext());
            } 
            // fall through
          case 95: break;
          case 4: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Numero")); return new Symbol(sym.NUM,yyline,yychar,yytext());
            } 
            // fall through
          case 96: break;
          case 5: 
            { yychar=0;
            } 
            // fall through
          case 97: break;
          case 6: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo")); return new Symbol(sym.TEXTO,yyline,yychar,yytext());
            } 
            // fall through
          case 98: break;
          case 7: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo")); return new Symbol(sym.SLASH,yyline,yychar,yytext());
            } 
            // fall through
          case 99: break;
          case 8: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo")); entro=false; cadenaTemp.setLength(0); yybegin(TEXTO); return new Symbol(sym.CIERRA_ETIQUETA,yyline,yychar,yytext());
            } 
            // fall through
          case 100: break;
          case 9: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo")); return new Symbol(sym.IGUAL,yyline,yychar,yytext());
            } 
            // fall through
          case 101: break;
          case 10: 
            { cadenaTemp.append(" ");
            } 
            // fall through
          case 102: break;
          case 11: 
            { entro = true; cadenaTemp.append(yytext());
            } 
            // fall through
          case 103: break;
          case 12: 
            { yychar=0; cadenaTemp.append("\n");
            } 
            // fall through
          case 104: break;
          case 13: 
            { yybegin(YYINITIAL); 
        if(entro){
            cadenaTemp.append("<");
            token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));
            token.add(new Pojos.Token(yyline,yychar,cadenaTemp.toString(),"Simbolo")); 
            return new Symbol(sym.TEXTO,yyline,yychar,cadenaTemp.toString());
        } 
        else {
            token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));
            return new Symbol(sym.TEXTO,yyline,yychar,yytext());
            }
            } 
            // fall through
          case 105: break;
          case 14: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Variable"));return new Symbol(sym.VARIABLE,yyline,yychar,yytext());
            } 
            // fall through
          case 106: break;
          case 15: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Numero")); return new Symbol(sym.ENTERO,yyline,yychar,yytext());
            } 
            // fall through
          case 107: break;
          case 16: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.CONCATENACION,yyline,yychar, yytext());
            } 
            // fall through
          case 108: break;
          case 17: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.MENOR,yyline,yychar, yytext());
            } 
            // fall through
          case 109: break;
          case 18: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo")); return new Symbol(sym.NOT,yyline,yychar, yytext());
            } 
            // fall through
          case 110: break;
          case 19: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.ENTRE,yyline,yychar, yytext());
            } 
            // fall through
          case 111: break;
          case 20: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.MAYOR,yyline,yychar, yytext());
            } 
            // fall through
          case 112: break;
          case 21: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.IGUAL,yyline,yychar,yytext());
            } 
            // fall through
          case 113: break;
          case 22: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.POR,yyline,yychar, yytext());
            } 
            // fall through
          case 114: break;
          case 23: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.PUNTOYCOMA,yyline,yychar, yytext());
            } 
            // fall through
          case 115: break;
          case 24: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.MAS,yyline,yychar, yytext());
            } 
            // fall through
          case 116: break;
          case 25: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.MENOS,yyline,yychar, yytext());
            } 
            // fall through
          case 117: break;
          case 26: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.ABRE,yyline,yychar, yytext());
            } 
            // fall through
          case 118: break;
          case 27: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.CIERRA,yyline,yychar, yytext());
            } 
            // fall through
          case 119: break;
          case 28: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.VAR1,yyline,yychar,yytext());
            } 
            // fall through
          case 120: break;
          case 29: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.VAR2,yyline,yychar,yytext());
            } 
            // fall through
          case 121: break;
          case 30: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo")); return new Symbol(sym.LLAVEIZQUIERDA,yyline,yychar, yytext());
            } 
            // fall through
          case 122: break;
          case 31: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo")); return new Symbol(sym.LLAVEDERECHA,yyline,yychar, yytext());
            } 
            // fall through
          case 123: break;
          case 32: 
            { yychar=0; yybegin(HS_STATE);
            } 
            // fall through
          case 124: break;
          case 33: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Cadena")); return new Symbol(sym.CADENA,yyline,yychar,yytext());
            } 
            // fall through
          case 125: break;
          case 34: 
            { yybegin(COM_HTML);
            } 
            // fall through
          case 126: break;
          case 35: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Cadena"));return new Symbol(sym.CADENA,yyline,yychar,yytext());
            } 
            // fall through
          case 127: break;
          case 36: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.MENOR_IGUAL,yyline,yychar, yytext());
            } 
            // fall through
          case 128: break;
          case 37: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Cierra Hs")); yybegin(YYINITIAL); return new Symbol(sym.R_CIERRAHS,yyline,yychar, yytext());
            } 
            // fall through
          case 129: break;
          case 38: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.DESIGUAL,yyline,yychar, yytext());
            } 
            // fall through
          case 130: break;
          case 39: 
            { yybegin(COM_LIN);
            } 
            // fall through
          case 131: break;
          case 40: 
            { yybegin(COM_MLIN);
            } 
            // fall through
          case 132: break;
          case 41: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.MAYOR_IGUAL,yyline,yychar, yytext());
            } 
            // fall through
          case 133: break;
          case 42: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo"));return new Symbol(sym.IGUAL_LOGICO,yyline,yychar, yytext());
            } 
            // fall through
          case 134: break;
          case 43: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_IF,yyline,yychar,yytext());
            } 
            // fall through
          case 135: break;
          case 44: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo")); return new Symbol(sym.AND,yyline,yychar, yytext());
            } 
            // fall through
          case 136: break;
          case 45: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Simbolo")); return new Symbol(sym.OR,yyline,yychar, yytext());
            } 
            // fall through
          case 137: break;
          case 46: 
            { yybegin(YYINITIAL);
            } 
            // fall through
          case 138: break;
          case 47: 
            { yybegin(HS_STATE);
            } 
            // fall through
          case 139: break;
          case 48: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Decmal")); return new Symbol(sym.DECIMAL,yyline,yychar,yytext());
            } 
            // fall through
          case 140: break;
          case 49: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Abre Hs"));  yybegin(HS_STATE); return new Symbol(sym.ABRE_HS,yyline,yychar,yytext());
            } 
            // fall through
          case 141: break;
          case 50: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_FILA,yyline,yychar,yytext());
            } 
            // fall through
          case 142: break;
          case 51: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"Abre Hs")); yybegin(HS_STATE); return new Symbol(sym.ABRE_HS,yyline,yychar,yytext());
            } 
            // fall through
          case 143: break;
          case 52: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_ECHO,yyline,yychar,yytext());
            } 
            // fall through
          case 144: break;
          case 53: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_ELSE,yyline,yychar,yytext());
            } 
            // fall through
          case 145: break;
          case 54: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_TRUE,yyline,yychar,yytext());
            } 
            // fall through
          case 146: break;
          case 55: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_SALTO,yyline,yychar,yytext());
            } 
            // fall through
          case 147: break;
          case 56: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_COMPI,yyline,yychar,yytext());
            } 
            // fall through
          case 148: break;
          case 57: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_BOTON,yyline,yychar,yytext());
            } 
            // fall through
          case 149: break;
          case 58: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_TABLA,yyline,yychar,yytext());
            } 
            // fall through
          case 150: break;
          case 59: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_FONDO,yyline,yychar,yytext());
            } 
            // fall through
          case 151: break;
          case 60: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_FALSE,yyline,yychar,yytext());
            } 
            // fall through
          case 152: break;
          case 61: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_CUERPO,yyline,yychar,yytext());
            } 
            // fall through
          case 153: break;
          case 62: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_IMAGEN,yyline,yychar,yytext());
            } 
            // fall through
          case 154: break;
          case 63: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_TITULO,yyline,yychar,yytext());
            } 
            // fall through
          case 155: break;
          case 64: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_TEXTOA,yyline,yychar,yytext());
            } 
            // fall through
          case 156: break;
          case 65: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_TEXTOB,yyline,yychar,yytext());
            } 
            // fall through
          case 157: break;
          case 66: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_COLUMNA,yyline,yychar,yytext());
            } 
            // fall through
          case 158: break;
          case 67: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_PARRAFO,yyline,yychar,yytext());
            } 
            // fall through
          case 159: break;
          case 68: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_ESPACIO,yyline,yychar,yytext());
            } 
            // fall through
          case 160: break;
          case 69: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_SETPATH,yyline,yychar,yytext());
            } 
            // fall through
          case 161: break;
          case 70: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_SETALTO,yyline,yychar,yytext());
            } 
            // fall through
          case 162: break;
          case 71: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_REPETIR,yyline,yychar,yytext());
            } 
            // fall through
          case 163: break;
          case 72: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_GETPATH,yyline,yychar,yytext());
            } 
            // fall through
          case 164: break;
          case 73: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_GETALTO,yyline,yychar,yytext());
            } 
            // fall through
          case 165: break;
          case 74: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_COLUMNAC,yyline,yychar,yytext());
            } 
            // fall through
          case 166: break;
          case 75: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR")); return new Symbol(sym.R_CABECERA,yyline,yychar,yytext());
            } 
            // fall through
          case 167: break;
          case 76: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_SETANCHO,yyline,yychar,yytext());
            } 
            // fall through
          case 168: break;
          case 77: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_SETBORDE,yyline,yychar,yytext());
            } 
            // fall through
          case 169: break;
          case 78: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_SETTEXTO,yyline,yychar,yytext());
            } 
            // fall through
          case 170: break;
          case 79: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_INSERTAR,yyline,yychar,yytext());
            } 
            // fall through
          case 171: break;
          case 80: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_GETANCHO,yyline,yychar,yytext());
            } 
            // fall through
          case 172: break;
          case 81: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_GETTEXTO,yyline,yychar,yytext());
            } 
            // fall through
          case 173: break;
          case 82: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_CREARBOTON,yyline,yychar,yytext());
            } 
            // fall through
          case 174: break;
          case 83: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_CREARTABLA,yyline,yychar,yytext());
            } 
            // fall through
          case 175: break;
          case 84: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_CLICKBOTON,yyline,yychar,yytext());
            } 
            // fall through
          case 176: break;
          case 85: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_CREARIMAGEN,yyline,yychar,yytext());
            } 
            // fall through
          case 177: break;
          case 86: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_CREARTEXTOA,yyline,yychar,yytext());
            } 
            // fall through
          case 178: break;
          case 87: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_CREARTEXTOB,yyline,yychar,yytext());
            } 
            // fall through
          case 179: break;
          case 88: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_SETCONTENIDO,yyline,yychar,yytext());
            } 
            // fall through
          case 180: break;
          case 89: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_CREARPARRAFO,yyline,yychar,yytext());
            } 
            // fall through
          case 181: break;
          case 90: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_GETCONTENIDO,yyline,yychar,yytext());
            } 
            // fall through
          case 182: break;
          case 91: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_SETALINEACION,yyline,yychar,yytext());
            } 
            // fall through
          case 183: break;
          case 92: 
            { token.add(new Pojos.Token(yyline,yychar,yytext(),"PR"));return new Symbol(sym.R_GETALINEACION,yyline,yychar,yytext());
            } 
            // fall through
          case 184: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
